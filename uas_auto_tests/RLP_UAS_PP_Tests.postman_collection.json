{
	"info": {
		"_postman_id": "14e1a403-e146-4b05-9377-0a0bee8e36e2",
		"name": "UAS_Integration_Tests",
		"description": "UAS integration tests for the new user agreeement service.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Generate OAuth Token",
			"item": [
				{
					"name": "OAuth Get Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Basic {{basic_auth_token}}",
								"type": "text"
							},
							{
								"key": "cache-control",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "psahayaraj@opentable.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Placements@123456789",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{oauth_host}}/api/v2/oauth/token",
							"host": [
								"{{oauth_host}}"
							],
							"path": [
								"api",
								"v2",
								"oauth",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e29a3372-491e-459c-9cfd-6740455b2275",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "89d4f359-13ef-410c-8f94-c475dfbd25a9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create a POS agreement and sign for Omnivore- Happy Path",
			"item": [
				{
					"name": "Create a new user agreement for Omnivore",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e1bc953-8af3-49b2-bcb0-9727e58b87b0",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"var pricingDetails =  data.pricingDetails;",
									"var ridList =  data.rids;",
									"",
									"if(responseCode.code !== 201){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).to.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDataUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(data.lastUpdatedDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).to.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there is no pricing details\",function(){",
									"    pm.expect(data).to.have.property('pricingDetails');",
									"    pm.expect(pricingDetails).to.equal(null);",
									"})",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(data).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"})",
									"",
									"pm.environment.set(\"agreementId\", data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"type\":\"pos_integration\",\n \"context\":\"urn:ot.restaurants:1011676\",\n \"contextName\":\"TestContext\"\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Agreement Created for Omnivore",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "249b3bcb-6a00-4bf0-8e0a-ff3ad26befdc",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.agreementDetails.type;",
									"var signedDetails = data.agreementDetails.signingDetails;",
									"var termsAndConditions = data.agreementDetails.termsAndConditions;",
									"var agreementDetails = data.agreementDetails;",
									"var ridList = agreementDetails.rids;",
									"",
									"//error scenario",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"",
									"else{",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//Verify the response body has agreement details",
									"pm.test(\"Verify agreement has agreement details\", function () {",
									"    pm.expect(data).to.have.property('agreementDetails');",
									"    pm.expect(agreementDetails).not.equal(null);",
									"});",
									"",
									"//verify agreementDetails has id exists  ",
									"pm.test(\"Verify agreementDetails has id exists\", function () {",
									"    pm.expect(agreementDetails).to.have.property('id');",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(agreementDetails).to.have.property('type');",
									"    pm.expect(agreementDetails.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('context');",
									"    pm.expect(agreementDetails.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextNamee exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('contextName');",
									"    pm.expect(agreementDetails.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(agreementDetails).to.have.property('locale');",
									"    pm.expect(agreementDetails.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(agreementDetails).to.have.property('assignedUser');",
									"    pm.expect(agreementDetails.assignedUser).to.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(agreementDetails).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('createdDateUTC');",
									"    pm.expect(agreementDetails.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(agreementDetails.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(agreementDetails).to.have.property('state');",
									"    pm.expect(agreementDetails.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(agreementDetails).to.have.property('signingDetails');",
									"    pm.expect(agreementDetails.signingDetails).to.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(agreementDetails).to.have.property('termsAndConditions');",
									"    pm.expect(agreementDetails.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"    pm.environment.set(\"termsId\",termsAndConditions[0].termsId);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(agreementDetails).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"})",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign User Agreement for Omnivore",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a029d532-8fce-438b-a338-fd9b1ba04e96",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"var ridList = data.rids;",
									"",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).not.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDataUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(data.lastUpdatedDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"//Verify the signing details exist in the response",
									"pm.test(\"Verify that the agreement is signed\", function (){",
									"    pm.expect(signedDetails).to.not.eql(null);",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has userEmail in the response",
									"pm.test(\"Verify that the agreement has userEmail\", function (){",
									"    pm.expect(signedDetails).to.have.property('userEmail');",
									"    pm.expect(signedDetails.userEmail).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has firstName in the response",
									"pm.test(\"Verify that the agreement has firstName\", function (){",
									"    pm.expect(signedDetails).to.have.property('firstName');",
									"    pm.expect(signedDetails.firstName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has lastName in the response",
									"pm.test(\"Verify that the agreement has lastName\", function (){",
									"    pm.expect(signedDetails).to.have.property('lastName');",
									"    pm.expect(signedDetails.lastName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has title in the response",
									"pm.test(\"Verify that the agreement has title \", function (){",
									"    pm.expect(signedDetails).to.have.property('title');",
									"    pm.expect(signedDetails.title).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has ipAddress in the response",
									"pm.test(\"Verify that the agreement has ipAddress \", function (){",
									"    pm.expect(signedDetails).to.have.property('ipAddress');",
									"    pm.expect(signedDetails.ipAddress).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has signedDate in the response",
									"pm.test(\"Verify that the agreement has signedDate \", function (){",
									"    pm.expect(signedDetails).to.have.property('signedDateUTC');",
									"    pm.expect(signedDetails.signedDateUTC).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(data).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"})",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"termsId\":[{{termsId}}]\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}/sign",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}",
								"sign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to resign signed agreement for Omnivore",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a74de80-0562-4bff-ac86-78d584270845",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"var ridList = data.rids;",
									"",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).not.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDataUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(data.lastUpdatedDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"//Verify the signing details exist in the response",
									"pm.test(\"Verify that the agreement is signed\", function (){",
									"    pm.expect(signedDetails).to.not.eql(null);",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has userEmail in the response",
									"pm.test(\"Verify that the agreement has userEmail\", function (){",
									"    pm.expect(signedDetails).to.have.property('userEmail');",
									"    pm.expect(signedDetails.userEmail).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has firstName in the response",
									"pm.test(\"Verify that the agreement has firstName\", function (){",
									"    pm.expect(signedDetails).to.have.property('firstName');",
									"    pm.expect(signedDetails.firstName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has lastName in the response",
									"pm.test(\"Verify that the agreement has lastName\", function (){",
									"    pm.expect(signedDetails).to.have.property('lastName');",
									"    pm.expect(signedDetails.lastName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has title in the response",
									"pm.test(\"Verify that the agreement has title \", function (){",
									"    pm.expect(signedDetails).to.have.property('title');",
									"    pm.expect(signedDetails.title).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has ipAddress in the response",
									"pm.test(\"Verify that the agreement has ipAddress \", function (){",
									"    pm.expect(signedDetails).to.have.property('ipAddress');",
									"    pm.expect(signedDetails.ipAddress).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has signedDate in the response",
									"pm.test(\"Verify that the agreement has signedDate \", function (){",
									"    pm.expect(signedDetails).to.have.property('signedDateUTC');",
									"    pm.expect(signedDetails.signedDateUTC).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(data).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"})",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"termsId\":[{{termsId}}]\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}/sign",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}",
								"sign"
							]
						},
						"description": "Error use case"
					},
					"response": []
				},
				{
					"name": "Get Signed Agreement for Omnivore",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c08ba16b-6c89-4d60-a2d2-35fa97f383f4",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.agreementDetails.type;",
									"var signedDetails = data.agreementDetails.signingDetails;",
									"var termsAndConditions = data.agreementDetails.termsAndConditions;",
									"var agreementDetails = data.agreementDetails;",
									"var ridList = agreementDetails.rids;",
									"",
									"//error scenario",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"",
									"else{",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//Verify the response body has agreement details",
									"pm.test(\"Verify agreement has agreement details\", function () {",
									"    pm.expect(data).to.have.property('agreementDetails');",
									"    pm.expect(agreementDetails).not.equal(null);",
									"});",
									"",
									"//verify agreementDetails has id exists  ",
									"pm.test(\"Verify agreementDetails has id exists\", function () {",
									"    pm.expect(agreementDetails).to.have.property('id');",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(agreementDetails).to.have.property('type');",
									"    pm.expect(agreementDetails.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('context');",
									"    pm.expect(agreementDetails.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextNamee exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('contextName');",
									"    pm.expect(agreementDetails.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(agreementDetails).to.have.property('locale');",
									"    pm.expect(agreementDetails.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does exist in the response and is not null",
									"pm.test(\"Verify agreement does have assignedUser\", function () {",
									"    pm.expect(agreementDetails).to.have.property('assignedUser');",
									"    pm.expect(agreementDetails.assignedUser).not.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(agreementDetails).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('createdDateUTC');",
									"    pm.expect(agreementDetails.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(agreementDetails.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(agreementDetails).to.have.property('state');",
									"    pm.expect(agreementDetails.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is signed in response",
									"pm.test(\"Verify that the agreement is signed\", function (){",
									"    pm.expect(agreementDetails).to.have.property('signingDetails');",
									"    pm.expect(agreementDetails.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(agreementDetails).to.have.property('termsAndConditions');",
									"    pm.expect(agreementDetails.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"    pm.environment.set(\"termsId\",termsAndConditions[0].termsId);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(agreementDetails).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"})",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}"
							]
						},
						"description": "Signed agreement should have signing details"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f2efc954-3467-47ce-9235-37415a21eb73",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5a572ffd-f643-4d19-8f21-13f2e8ffb884",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create a POS agreement and sign for Upserve",
			"item": [
				{
					"name": "Create a new user agreement for Upserve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edf32fbe-1d07-4efe-b4e9-082bbbd02a2e",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"",
									"if(responseCode.code !== 201){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).to.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDataUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDataUTC');",
									"    pm.expect(data.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).to.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).not.equal(null);",
									"});",
									"",
									"pm.environment.set(\"agreementId\", data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"type\":\"pos_integration\",\n \"context\":\"urn:ot.restaurants:1011676\"\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the agreement created for Upserve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "544af9f6-bd9a-478b-a357-575b6feb881b",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.agreementDetails.type;",
									"var signedDetails = data.agreementDetails.signingDetails;",
									"var termsAndConditions = data.agreementDetails.termsAndConditions;",
									"var agreementDetails = data.agreementDetails;",
									"var ridList = agreementDetails.rids;",
									"",
									"//error scenario",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"",
									"else{",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//Verify the response body has agreement details",
									"pm.test(\"Verify agreement has agreement details\", function () {",
									"    pm.expect(data).to.have.property('agreementDetails');",
									"    pm.expect(agreementDetails).not.equal(null);",
									"});",
									"",
									"//verify agreementDetails has id exists  ",
									"pm.test(\"Verify agreementDetails has id exists\", function () {",
									"    pm.expect(agreementDetails).to.have.property('id');",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(agreementDetails).to.have.property('type');",
									"    pm.expect(agreementDetails.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('context');",
									"    pm.expect(agreementDetails.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextNamee exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('contextName');",
									"    pm.expect(agreementDetails.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(agreementDetails).to.have.property('locale');",
									"    pm.expect(agreementDetails.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(agreementDetails).to.have.property('assignedUser');",
									"    pm.expect(agreementDetails.assignedUser).to.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(agreementDetails).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('createdDateUTC');",
									"    pm.expect(agreementDetails.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(agreementDetails.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(agreementDetails).to.have.property('state');",
									"    pm.expect(agreementDetails.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(agreementDetails).to.have.property('signingDetails');",
									"    pm.expect(agreementDetails.signingDetails).to.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(agreementDetails).to.have.property('termsAndConditions');",
									"    pm.expect(agreementDetails.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"    pm.environment.set(\"termsId\",termsAndConditions[0].termsId);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(agreementDetails).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign User agreement for Upserve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db462419-47fe-45b6-821c-2115b68c8743",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"var ridList =  data.rids;",
									"",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).not.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDataUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(data.lastUpdatedDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"//Verify the signing details exist in the response",
									"pm.test(\"Verify that the agreement is signed\", function (){",
									"    pm.expect(signedDetails).to.not.eql(null);",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has userEmail in the response",
									"pm.test(\"Verify that the agreement has userEmail\", function (){",
									"    pm.expect(signedDetails).to.have.property('userEmail');",
									"    pm.expect(signedDetails.userEmail).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has firstName in the response",
									"pm.test(\"Verify that the agreement has firstName\", function (){",
									"    pm.expect(signedDetails).to.have.property('firstName');",
									"    pm.expect(signedDetails.firstName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has lastName in the response",
									"pm.test(\"Verify that the agreement has lastName\", function (){",
									"    pm.expect(signedDetails).to.have.property('lastName');",
									"    pm.expect(signedDetails.lastName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has title in the response",
									"pm.test(\"Verify that the agreement has title \", function (){",
									"    pm.expect(signedDetails).to.have.property('title');",
									"    pm.expect(signedDetails.title).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has ipAddress in the response",
									"pm.test(\"Verify that the agreement has ipAddress \", function (){",
									"    pm.expect(signedDetails).to.have.property('ipAddress');",
									"    pm.expect(signedDetails.ipAddress).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has signedDate in the response",
									"pm.test(\"Verify that the agreement has signedDate \", function (){",
									"    pm.expect(signedDetails).to.have.property('signedDateUTC');",
									"    pm.expect(signedDetails.signedDateUTC).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(data).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"termsId\":[{{termsId}}]\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}/sign",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}",
								"sign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the signed Agreement for Upserve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8a28726-5bfe-40e8-a9df-c18a0e416c47",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.agreementDetails.type;",
									"var signedDetails = data.agreementDetails.signingDetails;",
									"var termsAndConditions = data.agreementDetails.termsAndConditions;",
									"var agreementDetails = data.agreementDetails;",
									"var ridList = agreementDetails.rids;",
									"",
									"//error scenario",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"",
									"else{",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//Verify the response body has agreement details",
									"pm.test(\"Verify agreement has agreement details\", function () {",
									"    pm.expect(data).to.have.property('agreementDetails');",
									"    pm.expect(agreementDetails).not.equal(null);",
									"});",
									"",
									"//verify agreementDetails has id exists  ",
									"pm.test(\"Verify agreementDetails has id exists\", function () {",
									"    pm.expect(agreementDetails).to.have.property('id');",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(agreementDetails).to.have.property('type');",
									"    pm.expect(agreementDetails.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('context');",
									"    pm.expect(agreementDetails.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextNamee exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('contextName');",
									"    pm.expect(agreementDetails.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(agreementDetails).to.have.property('locale');",
									"    pm.expect(agreementDetails.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does exist in the response and is not null",
									"pm.test(\"Verify agreement does have assignedUser\", function () {",
									"    pm.expect(agreementDetails).to.have.property('assignedUser');",
									"    pm.expect(agreementDetails.assignedUser).not.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(agreementDetails).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('createdDateUTC');",
									"    pm.expect(agreementDetails.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(agreementDetails.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(agreementDetails).to.have.property('state');",
									"    pm.expect(agreementDetails.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is signed in response",
									"pm.test(\"Verify that the agreement is signed\", function (){",
									"    pm.expect(agreementDetails).to.have.property('signingDetails');",
									"    pm.expect(agreementDetails.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(agreementDetails).to.have.property('termsAndConditions');",
									"    pm.expect(agreementDetails.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"    pm.environment.set(\"termsId\",termsAndConditions[0].termsId);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(agreementDetails).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create a new Venga Host agreement and sign - Happy Path",
			"item": [
				{
					"name": "Create a new user agreement for venga host",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ca710c3-fe06-431c-8e44-d1c9e1e48893",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"var pricingDetails =  data.pricingDetails;",
									"var ridList =  data.rids;",
									"",
									"if(responseCode.code !== 201){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextName exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('contextName');",
									"    pm.expect(data.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).to.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(data.lastUpdatedDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).to.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there is pricing details\",function(){",
									"    pm.expect(pricingDetails).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(data).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"",
									"pm.environment.set(\"agreementId\", data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"type\":\"venga_integration_host\",\n \"context\":\"urn:ot.restaurants:1011676\",\n \"contextName\":\"test\",\n \"pricing\":[{  \n      \"productName\":\"Venga Host Subscription\",\n      \"productCode\":\"VSYS002\",\n      \"currencyCode\":\"USD\",\n      \"listPrice\":249.00,\n\t  \"feeType\":\"subscription\",\n      \"billingRecurrence\":\"monthly\",\n      \"termLength\" : 12\n   },\n   {  \n      \"productName\":\"Venga Host Implementation \",\n      \"productCode\":\"VSAC002\",\n      \"currencyCode\":\"USD\",\n      \"listPrice\":249.00,\n      \"feeType\":\"installation\",\n      \"billingRecurrence\":\"one time\",\n      \"termLength\" : 0\n   }\n]\n \n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the agreement created for venga_host",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18483592-7235-4b30-8418-79f8ed662e8d",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.agreementDetails.type;",
									"var signedDetails = data.agreementDetails.signingDetails;",
									"var termsAndConditions = data.agreementDetails.termsAndConditions;",
									"var agreementDetails = data.agreementDetails;",
									"var ridList = agreementDetails.rids;",
									"",
									"//error scenario",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"",
									"else{",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//Verify the response body has agreement details",
									"pm.test(\"Verify agreement has agreement details\", function () {",
									"    pm.expect(data).to.have.property('agreementDetails');",
									"    pm.expect(agreementDetails).not.equal(null);",
									"});",
									"",
									"//verify agreementDetails has id exists  ",
									"pm.test(\"Verify agreementDetails has id exists\", function () {",
									"    pm.expect(agreementDetails).to.have.property('id');",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(agreementDetails).to.have.property('type');",
									"    pm.expect(agreementDetails.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('context');",
									"    pm.expect(agreementDetails.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextNamee exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('contextName');",
									"    pm.expect(agreementDetails.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(agreementDetails).to.have.property('locale');",
									"    pm.expect(agreementDetails.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(agreementDetails).to.have.property('assignedUser');",
									"    pm.expect(agreementDetails.assignedUser).to.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(agreementDetails).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('createdDateUTC');",
									"    pm.expect(agreementDetails.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(agreementDetails.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(agreementDetails).to.have.property('state');",
									"    pm.expect(agreementDetails.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(agreementDetails).to.have.property('signingDetails');",
									"    pm.expect(agreementDetails.signingDetails).to.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(agreementDetails).to.have.property('termsAndConditions');",
									"    pm.expect(agreementDetails.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"    pm.environment.set(\"termsId\",termsAndConditions[0].termsId);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(agreementDetails).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign the Agreement created for venga_host",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29db360a-2d6b-43ea-86cd-dd3797da5273",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"var ridList =  data.rids;",
									"",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).not.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDataUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(data.lastUpdatedDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"//Verify the signing details exist in the response",
									"pm.test(\"Verify that the agreement is signed\", function (){",
									"    pm.expect(signedDetails).to.not.eql(null);",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has userEmail in the response",
									"pm.test(\"Verify that the agreement has userEmail\", function (){",
									"    pm.expect(signedDetails).to.have.property('userEmail');",
									"    pm.expect(signedDetails.userEmail).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has firstName in the response",
									"pm.test(\"Verify that the agreement has firstName\", function (){",
									"    pm.expect(signedDetails).to.have.property('firstName');",
									"    pm.expect(signedDetails.firstName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has lastName in the response",
									"pm.test(\"Verify that the agreement has lastName\", function (){",
									"    pm.expect(signedDetails).to.have.property('lastName');",
									"    pm.expect(signedDetails.lastName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has title in the response",
									"pm.test(\"Verify that the agreement has title \", function (){",
									"    pm.expect(signedDetails).to.have.property('title');",
									"    pm.expect(signedDetails.title).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has ipAddress in the response",
									"pm.test(\"Verify that the agreement has ipAddress \", function (){",
									"    pm.expect(signedDetails).to.have.property('ipAddress');",
									"    pm.expect(signedDetails.ipAddress).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has signedDate in the response",
									"pm.test(\"Verify that the agreement has signedDate \", function (){",
									"    pm.expect(signedDetails).to.have.property('signedDateUTC');",
									"    pm.expect(signedDetails.signedDateUTC).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(data).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"termsId\":[{{termsId}}]\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}/sign",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}",
								"sign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the Signed Agreement for Venga Host",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c85227d-ca16-4d3f-b916-46934c501a51",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.agreementDetails.type;",
									"var signedDetails = data.agreementDetails.signingDetails;",
									"var termsAndConditions = data.agreementDetails.termsAndConditions;",
									"var agreementDetails = data.agreementDetails;",
									"var ridList = agreementDetails.rids;",
									"",
									"//error scenario",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"",
									"else{",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//Verify the response body has agreement details",
									"pm.test(\"Verify agreement has agreement details\", function () {",
									"    pm.expect(data).to.have.property('agreementDetails');",
									"    pm.expect(agreementDetails).not.equal(null);",
									"});",
									"",
									"//verify agreementDetails has id exists  ",
									"pm.test(\"Verify agreementDetails has id exists\", function () {",
									"    pm.expect(agreementDetails).to.have.property('id');",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(agreementDetails).to.have.property('type');",
									"    pm.expect(agreementDetails.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('context');",
									"    pm.expect(agreementDetails.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextNamee exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('contextName');",
									"    pm.expect(agreementDetails.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(agreementDetails).to.have.property('locale');",
									"    pm.expect(agreementDetails.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does exist in the response and is not null",
									"pm.test(\"Verify agreement does have assignedUser\", function () {",
									"    pm.expect(agreementDetails).to.have.property('assignedUser');",
									"    pm.expect(agreementDetails.assignedUser).not.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(agreementDetails).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('createdDateUTC');",
									"    pm.expect(agreementDetails.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(agreementDetails.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(agreementDetails).to.have.property('state');",
									"    pm.expect(agreementDetails.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is signed in response",
									"pm.test(\"Verify that the agreement is signed\", function (){",
									"    pm.expect(agreementDetails).to.have.property('signingDetails');",
									"    pm.expect(agreementDetails.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(agreementDetails).to.have.property('termsAndConditions');",
									"    pm.expect(agreementDetails.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"    pm.environment.set(\"termsId\",termsAndConditions[0].termsId);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(agreementDetails).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create a new Venga Review Manager agreement and sign - Happy Path Copy",
			"item": [
				{
					"name": "Create a new user agreement for venga host",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ca710c3-fe06-431c-8e44-d1c9e1e48893",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"var pricingDetails =  data.pricingDetails;",
									"var ridList =  data.rids;",
									"",
									"if(responseCode.code !== 201){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextName exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('contextName');",
									"    pm.expect(data.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).to.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(data.lastUpdatedDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).to.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(data).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there is pricing details\",function(){",
									"    pm.expect(pricingDetails).not.equal(null);",
									"});",
									"pm.environment.set(\"agreementId\", data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"type\":\"venga_integration_review_manager\",\n \"context\":\"urn:ot.restaurants:983932\",\n \"contextName\":\"TestContext\",\n \"pricing\":[{  \n      \"productName\":\"Venga Review Manager Subscription\",\n      \"currencyCode\":\"USD\",\n      \"listPrice\":99.00,\n\t  \"feeType\":\"subscription\",\n      \"billingRecurrence\":\"monthly\",\n      \"termLength\" : 12\n   },\n   {  \n      \"productName\":\"Venga Review Manager Implementation\",\n      \"currencyCode\":\"USD\",\n      \"listPrice\":99.00,\n      \"feeType\":\"Installation\",\n      \"billingRecurrence\":\"One Time\",\n      \"termLength\" : 0\n   }\n]\n\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the agreement created for venga_review_manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18483592-7235-4b30-8418-79f8ed662e8d",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.agreementDetails.type;",
									"var signedDetails = data.agreementDetails.signingDetails;",
									"var termsAndConditions = data.agreementDetails.termsAndConditions;",
									"var agreementDetails = data.agreementDetails;",
									"var ridList = agreementDetails.rids;",
									"",
									"//error scenario",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"",
									"else{",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//Verify the response body has agreement details",
									"pm.test(\"Verify agreement has agreement details\", function () {",
									"    pm.expect(data).to.have.property('agreementDetails');",
									"    pm.expect(agreementDetails).not.equal(null);",
									"});",
									"",
									"//verify agreementDetails has id exists  ",
									"pm.test(\"Verify agreementDetails has id exists\", function () {",
									"    pm.expect(agreementDetails).to.have.property('id');",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(agreementDetails).to.have.property('type');",
									"    pm.expect(agreementDetails.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('context');",
									"    pm.expect(agreementDetails.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextNamee exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('contextName');",
									"    pm.expect(agreementDetails.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(agreementDetails).to.have.property('locale');",
									"    pm.expect(agreementDetails.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(agreementDetails).to.have.property('assignedUser');",
									"    pm.expect(agreementDetails.assignedUser).to.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(agreementDetails).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('createdDateUTC');",
									"    pm.expect(agreementDetails.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(agreementDetails.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(agreementDetails).to.have.property('state');",
									"    pm.expect(agreementDetails.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(agreementDetails).to.have.property('signingDetails');",
									"    pm.expect(agreementDetails.signingDetails).to.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(agreementDetails).to.have.property('termsAndConditions');",
									"    pm.expect(agreementDetails.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"    pm.environment.set(\"termsId\",termsAndConditions[0].termsId);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(agreementDetails).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign the Agreement created for venga_host",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29db360a-2d6b-43ea-86cd-dd3797da5273",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"var ridList =  data.rids;",
									"",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).not.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDataUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(data.lastUpdatedDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"//Verify the signing details exist in the response",
									"pm.test(\"Verify that the agreement is signed\", function (){",
									"    pm.expect(signedDetails).to.not.eql(null);",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has userEmail in the response",
									"pm.test(\"Verify that the agreement has userEmail\", function (){",
									"    pm.expect(signedDetails).to.have.property('userEmail');",
									"    pm.expect(signedDetails.userEmail).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has firstName in the response",
									"pm.test(\"Verify that the agreement has firstName\", function (){",
									"    pm.expect(signedDetails).to.have.property('firstName');",
									"    pm.expect(signedDetails.firstName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has lastName in the response",
									"pm.test(\"Verify that the agreement has lastName\", function (){",
									"    pm.expect(signedDetails).to.have.property('lastName');",
									"    pm.expect(signedDetails.lastName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has title in the response",
									"pm.test(\"Verify that the agreement has title \", function (){",
									"    pm.expect(signedDetails).to.have.property('title');",
									"    pm.expect(signedDetails.title).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has ipAddress in the response",
									"pm.test(\"Verify that the agreement has ipAddress \", function (){",
									"    pm.expect(signedDetails).to.have.property('ipAddress');",
									"    pm.expect(signedDetails.ipAddress).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has signedDate in the response",
									"pm.test(\"Verify that the agreement has signedDate \", function (){",
									"    pm.expect(signedDetails).to.have.property('signedDateUTC');",
									"    pm.expect(signedDetails.signedDateUTC).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(data).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"termsId\":[{{termsId}}]\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}/sign",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}",
								"sign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the Signed Agreement for Venga Host",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c85227d-ca16-4d3f-b916-46934c501a51",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.agreementDetails.type;",
									"var signedDetails = data.agreementDetails.signingDetails;",
									"var termsAndConditions = data.agreementDetails.termsAndConditions;",
									"var agreementDetails = data.agreementDetails;",
									"var ridList = agreementDetails.rids;",
									"",
									"//error scenario",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"",
									"else{",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//Verify the response body has agreement details",
									"pm.test(\"Verify agreement has agreement details\", function () {",
									"    pm.expect(data).to.have.property('agreementDetails');",
									"    pm.expect(agreementDetails).not.equal(null);",
									"});",
									"",
									"//verify agreementDetails has id exists  ",
									"pm.test(\"Verify agreementDetails has id exists\", function () {",
									"    pm.expect(agreementDetails).to.have.property('id');",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(agreementDetails).to.have.property('type');",
									"    pm.expect(agreementDetails.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('context');",
									"    pm.expect(agreementDetails.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextNamee exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('contextName');",
									"    pm.expect(agreementDetails.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(agreementDetails).to.have.property('locale');",
									"    pm.expect(agreementDetails.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does exist in the response and is not null",
									"pm.test(\"Verify agreement does have assignedUser\", function () {",
									"    pm.expect(agreementDetails).to.have.property('assignedUser');",
									"    pm.expect(agreementDetails.assignedUser).not.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(agreementDetails).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('createdDateUTC');",
									"    pm.expect(agreementDetails.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(agreementDetails.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(agreementDetails).to.have.property('state');",
									"    pm.expect(agreementDetails.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is signed in response",
									"pm.test(\"Verify that the agreement is signed\", function (){",
									"    pm.expect(agreementDetails).to.have.property('signingDetails');",
									"    pm.expect(agreementDetails.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(agreementDetails).to.have.property('termsAndConditions');",
									"    pm.expect(agreementDetails.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"    pm.environment.set(\"termsId\",termsAndConditions[0].termsId);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(agreementDetails).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3905c9e0-2a61-44db-86fa-2a808059390f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "71a14f32-e494-4360-a614-6fbed001f906",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create Agreement v2 api and sign - happy path",
			"item": [
				{
					"name": "Create venga agreement for group rids with empty metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d85591c5-fde3-40d2-ac57-80b0d9de0fed",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"var pricingDetails =  data.pricingDetails;",
									"var ridList =  data.rids;",
									"",
									"if(responseCode.code !== 201){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextName exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('contextName');",
									"    pm.expect(data.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).to.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(data.lastUpdatedDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).to.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there is pricing details\",function(){",
									"    pm.expect(pricingDetails).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(data).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"})",
									"",
									"pm.environment.set(\"agreementId\", data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\" : \"venga_integration_host\",\n  \"rids\" : [ \"4025\", \"1012519\" ],\n  \"pricing\" : {\n    \"region\" : {\n      \"metro\" : null,\n      \"macro\" : \"New York / Tri-State Area\",\n      \"country\" : \"US\"\n    },\n    \"primaryProduct\" : null,\n    \"currency\" : \"USD\",\n    \"addons\" : [ {\n      \"status\" : \"Available\",\n      \"bundleName\" : \"venga_integration_host\",\n      \"bundleDisplayName\" : \"Host\",\n      \"bundleDetails\" : [ {\n        \"termLength\" : 0,\n        \"sku\" : \"VSAC002\",\n        \"renewalTermLength\" : 1,\n        \"name\" : \"Venga Host Implementation\",\n        \"listPrice\" : 249.0,\n        \"feeType\" : \"installation\",\n        \"discounts\" : [ ],\n        \"description\" : \"Venga Host Setup Fee\",\n        \"billingRecurrence\" : \"One Time\"\n      }, {\n        \"termLength\" : 12,\n        \"sku\" : \"VSYS002\",\n        \"renewalTermLength\" : 1,\n        \"name\" : \"Venga Host Subscription\",\n        \"listPrice\" : 249.0,\n        \"feeType\" : \"Subscription\",\n        \"discounts\" : [ ],\n        \"description\" : \"Venga Host with POS Integration\",\n        \"billingRecurrence\" : \"Monthly\"\n      }, {\n        \"termLength\" : 0,\n        \"sku\" : \"VPOSINTEG\",\n        \"renewalTermLength\" : 1,\n        \"name\" : \"Venga POS Integration\",\n        \"listPrice\" : 0.0,\n        \"feeType\" : \"Subscription\",\n        \"discounts\" : [ ],\n        \"description\" : \"Venga POS Integration\",\n        \"billingRecurrence\" : \"Monthly\"\n      } ],\n      \"bundleCategory\" : \"Venga\"\n    } ]\n  },\n  \"metadata\" : {},\n  \"locale\" : \"en-US\",\n  \"legalEntity\" : null,\n  \"contractRecipientDetails\" : {\n    \"lastName\" : \"Qian\",\n    \"firstName\" : \"Jocelyn\",\n    \"email\" : \"jqian@opentable.com\"\n  },\n  \"contractOwnerEmail\" : \"jqian@opentable.com\",\n  \"contextName\" : \"Knowles Family Restaurants\",\n  \"context\" : \"urn:ot.groups:34945\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://user-agreement-service.pp-sf.otenv.com/v2/user-agreement/agreements",
							"protocol": "http",
							"host": [
								"user-agreement-service",
								"pp-sf",
								"otenv",
								"com"
							],
							"path": [
								"v2",
								"user-agreement",
								"agreements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the agreement created for group rids with empty metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18483592-7235-4b30-8418-79f8ed662e8d",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.agreementDetails.type;",
									"var signedDetails = data.agreementDetails.signingDetails;",
									"var termsAndConditions = data.agreementDetails.termsAndConditions;",
									"var agreementDetails = data.agreementDetails;",
									"var ridList = agreementDetails.rids;",
									"",
									"//error scenario",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"",
									"else{",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//Verify the response body has agreement details",
									"pm.test(\"Verify agreement has agreement details\", function () {",
									"    pm.expect(data).to.have.property('agreementDetails');",
									"    pm.expect(agreementDetails).not.equal(null);",
									"});",
									"",
									"//verify agreementDetails has id exists  ",
									"pm.test(\"Verify agreementDetails has id exists\", function () {",
									"    pm.expect(agreementDetails).to.have.property('id');",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(agreementDetails).to.have.property('type');",
									"    pm.expect(agreementDetails.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('context');",
									"    pm.expect(agreementDetails.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextNamee exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('contextName');",
									"    pm.expect(agreementDetails.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(agreementDetails).to.have.property('locale');",
									"    pm.expect(agreementDetails.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(agreementDetails).to.have.property('assignedUser');",
									"    pm.expect(agreementDetails.assignedUser).to.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(agreementDetails).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('createdDateUTC');",
									"    pm.expect(agreementDetails.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(agreementDetails.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(agreementDetails).to.have.property('state');",
									"    pm.expect(agreementDetails.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(agreementDetails).to.have.property('signingDetails');",
									"    pm.expect(agreementDetails.signingDetails).to.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(agreementDetails).to.have.property('termsAndConditions');",
									"    pm.expect(agreementDetails.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"    pm.environment.set(\"termsId\",termsAndConditions[0].termsId);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(agreementDetails).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign the Agreement for group rids with empty metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29db360a-2d6b-43ea-86cd-dd3797da5273",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"var ridList =  data.rids;",
									"",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).not.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDataUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(data.lastUpdatedDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"//Verify the signing details exist in the response",
									"pm.test(\"Verify that the agreement is signed\", function (){",
									"    pm.expect(signedDetails).to.not.eql(null);",
									"    pm.expect(data.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has userEmail in the response",
									"pm.test(\"Verify that the agreement has userEmail\", function (){",
									"    pm.expect(signedDetails).to.have.property('userEmail');",
									"    pm.expect(signedDetails.userEmail).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has firstName in the response",
									"pm.test(\"Verify that the agreement has firstName\", function (){",
									"    pm.expect(signedDetails).to.have.property('firstName');",
									"    pm.expect(signedDetails.firstName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has lastName in the response",
									"pm.test(\"Verify that the agreement has lastName\", function (){",
									"    pm.expect(signedDetails).to.have.property('lastName');",
									"    pm.expect(signedDetails.lastName).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has title in the response",
									"pm.test(\"Verify that the agreement has title \", function (){",
									"    pm.expect(signedDetails).to.have.property('title');",
									"    pm.expect(signedDetails.title).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has ipAddress in the response",
									"pm.test(\"Verify that the agreement has ipAddress \", function (){",
									"    pm.expect(signedDetails).to.have.property('ipAddress');",
									"    pm.expect(signedDetails.ipAddress).not.equal(null);",
									"});",
									"",
									"//Verify the signing details has signedDate in the response",
									"pm.test(\"Verify that the agreement has signedDate \", function (){",
									"    pm.expect(signedDetails).to.have.property('signedDateUTC');",
									"    pm.expect(signedDetails.signedDateUTC).not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(data).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"termsId\":[{{termsId}}]\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}/sign",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}",
								"sign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the Signed Agreement for group rids with empty metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c85227d-ca16-4d3f-b916-46934c501a51",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.agreementDetails.type;",
									"var signedDetails = data.agreementDetails.signingDetails;",
									"var termsAndConditions = data.agreementDetails.termsAndConditions;",
									"var agreementDetails = data.agreementDetails;",
									"var ridList = agreementDetails.rids;",
									"",
									"//error scenario",
									"if(responseCode.code !== 200){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"",
									"else{",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//Verify the response body has agreement details",
									"pm.test(\"Verify agreement has agreement details\", function () {",
									"    pm.expect(data).to.have.property('agreementDetails');",
									"    pm.expect(agreementDetails).not.equal(null);",
									"});",
									"",
									"//verify agreementDetails has id exists  ",
									"pm.test(\"Verify agreementDetails has id exists\", function () {",
									"    pm.expect(agreementDetails).to.have.property('id');",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(agreementDetails).to.have.property('type');",
									"    pm.expect(agreementDetails.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('context');",
									"    pm.expect(agreementDetails.context).not.equal(null);",
									"});",
									"",
									"//Verify the contextNamee exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(agreementDetails).to.have.property('contextName');",
									"    pm.expect(agreementDetails.contextName).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(agreementDetails).to.have.property('locale');",
									"    pm.expect(agreementDetails.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does exist in the response and is not null",
									"pm.test(\"Verify agreement does have assignedUser\", function () {",
									"    pm.expect(agreementDetails).to.have.property('assignedUser');",
									"    pm.expect(agreementDetails.assignedUser).not.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(agreementDetails).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('createdDateUTC');",
									"    pm.expect(agreementDetails.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDateUTC\", function () {",
									"    pm.expect(agreementDetails).to.have.property('lastUpdatedDateUTC');",
									"    pm.expect(agreementDetails.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(agreementDetails).to.have.property('state');",
									"    pm.expect(agreementDetails.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is signed in response",
									"pm.test(\"Verify that the agreement is signed\", function (){",
									"    pm.expect(agreementDetails).to.have.property('signingDetails');",
									"    pm.expect(agreementDetails.signingDetails).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(agreementDetails).to.have.property('termsAndConditions');",
									"    pm.expect(agreementDetails.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"    pm.environment.set(\"termsId\",termsAndConditions[0].termsId);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).to.not.equal(null);",
									"});",
									"",
									"pm.test(\"Verify there exists a rid list\",function(){",
									"    pm.expect(agreementDetails).to.have.property('rids');",
									"    pm.expect(ridList).not.equal(null);",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create and Sign Agreements Invalid Requests ",
			"item": [
				{
					"name": "Sign User Agreement without terms id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2503ea88-9bc9-49e7-a289-811165b98b88",
								"exec": [
									"var errorData = JSON.parse(responseBody);",
									"",
									"if(responseCode.code == 400){",
									"    ",
									"   pm.test(\"Verify error for sign agreement with no terms id \", function () {",
									"    pm.expect(errorData.error).to.eql(\"Bad Request\");",
									"});",
									"",
									"   pm.test(\"Verify message for sign agreement with no terms id \", function () {",
									"    pm.expect(errorData.message).to.eql(\"Bad Request\");",
									"});",
									"",
									"  pm.test(\"Verify status for sign agreement with no terms id \", function () {",
									"    pm.expect(errorData.status).to.eql(400);",
									"});",
									"",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements/{{agreementId}}/sign",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements",
								"{{agreementId}}",
								"sign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User agreement with invalid agreement type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69e20807-3377-43ea-8638-7ca02d5629e3",
								"exec": [
									"var errorData = JSON.parse(responseBody);",
									"",
									"if(responseCode.code == 400){",
									"    ",
									"   pm.test(\"Verify error code for create agreement with invalid agreement type  \", function () {",
									"    pm.expect(errorData.errorCode).to.eql(\"invalid_agreement_type\");",
									"});",
									"",
									"   pm.test(\"Verify error description for create agreement with invalid agreement type  \", function () {",
									"    pm.expect(errorData.description).to.eql(\"agreement type not supported\");",
									"});",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"type\":\"invalid_agreement_type\",\n \"context\":\"urn:ot.restaurants:1005730\"\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new user agreement for Upserve with pricing details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b016ed21-7293-462b-93c2-62f89e2f60a0",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"console.log(\"The agreement id is :\" + data.id);",
									"",
									"//get the agreement type, signing details and terms and conditions for agreement",
									"var agreementType = data.type;",
									"var signedDetails = data.signingDetails;",
									"var termsAndConditions = data.termsAndConditions;",
									"",
									"if(responseCode.code !== 201){",
									"    console.log(\"Failed with the following error:\" + data.errorCode);",
									"    console.log(\"error status: \" + responseCode.Code);",
									"}",
									"else{",
									"",
									"//success scenario: verify status code is 200",
									"pm.test(\"Verify status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"//verify agreement id exists in response ",
									"pm.test(\"Verify agreement has agreement id\", function () {",
									"    pm.expect(data).to.have.property('id');",
									"    pm.expect(data.id).not.equal(null);",
									"});",
									"",
									"//Verify agreement type exist in response and is not null",
									"pm.test(\"Verify agreement has agreement type\", function () {",
									"    pm.expect(data).to.have.property('type');",
									"    pm.expect(data.type).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type exists in response and is not null",
									"pm.test(\"Verify agreement has agreement type name\", function () {",
									"    pm.expect(agreementType).to.have.property('name');",
									"    pm.expect(agreementType.name).not.equal(null);",
									"});",
									"",
									"//Verify the name of the agreement type intent text id is in response and is not null",
									"pm.test(\"Verify agreement has agreement type intent text id\", function () {",
									"    pm.expect(agreementType).to.have.property('intentTextId');",
									"    pm.expect(agreementType.intentTextId).not.equal(null);",
									"});",
									" ",
									"//Verify the context exists in the response and is not null",
									"pm.test(\"Verify agreement has context\", function () {",
									"    pm.expect(data).to.have.property('context');",
									"    pm.expect(data.context).not.equal(null);",
									"});",
									"",
									"//Verify the locale exists in the response and is not null",
									"pm.test(\"Verify agreement has locale\", function () {",
									"    pm.expect(data).to.have.property('locale');",
									"    pm.expect(data.locale).not.equal(null);",
									"});",
									"",
									"//Verify the assignedUser does not exist in the response and is not null",
									"pm.test(\"Verify agreement does not have assignedUser\", function () {",
									"    pm.expect(data).to.have.property('assignedUser');",
									"    pm.expect(data.assignedUser).to.equal(null);",
									"});",
									"",
									"//Verify the legalEntity exists in the response and is not null",
									"pm.test(\"Verify agreement has legalEntity\", function () {",
									"    pm.expect(data).to.have.property('legalEntity');",
									"});",
									"",
									"//Verify the createdDateUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has createdDateUTC\", function () {",
									"    pm.expect(data).to.have.property('createdDateUTC');",
									"    pm.expect(data.createdDateUTC).not.equal(null);",
									"});",
									"",
									"//Verify the lastUpdatedDataUTC exists in the response and is not null",
									"pm.test(\"Verify agreement has lastUpdatedDataUTC\", function () {",
									"    pm.expect(data).to.have.property('lastUpdatedDataUTC');",
									"    pm.expect(data.lastUpdatedDataUTC).not.equal(null);",
									"});",
									"",
									"//Verify the state exists in the response and is not null",
									"pm.test(\"Verify agreement has state\", function () {",
									"    pm.expect(data).to.have.property('state');",
									"    pm.expect(data.state).not.equal(null);",
									"});",
									"",
									"//Verify the signing details is null (not yet signed) in response",
									"pm.test(\"Verify that the agreement is not yet signed\", function (){",
									"    pm.expect(data).to.have.property('signingDetails');",
									"    pm.expect(data.signingDetails).to.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions exist in the response",
									"pm.test(\"Verify that the agreement has terms and conditions \", function (){",
									"    pm.expect(data).to.have.property('termsAndConditions');",
									"    pm.expect(data.termsAndConditions).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has version in response",
									"pm.test(\"Verify the terms and conditions has version in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('version');",
									"    pm.expect(termsAndConditions[0].version).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has terms id in response",
									"pm.test(\"Verify the terms and conditions has termsId in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('termsId');",
									"    pm.expect(termsAndConditions[0].termsId).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has content in response",
									"pm.test(\"Verify the terms and conditions has content in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('content');",
									"    pm.expect(termsAndConditions[0].content).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has title in response",
									"pm.test(\"Verify the terms and conditions has title in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('title');",
									"    pm.expect(termsAndConditions[0].title).not.equal(null);",
									"});",
									"",
									"//Verify the terms and conditions has locale in response",
									"pm.test(\"Verify the terms and conditions has locale in response \", function (){",
									"    pm.expect(termsAndConditions[0]).to.have.property('locale');",
									"    pm.expect(termsAndConditions[0].locale).not.equal(null);",
									"});",
									"",
									"pm.environment.set(\"agreementId\", data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"type\":\"pos_integration_generic\",\n \"context\":\"urn:ot.restaurants:1011676\",\n \"contextName\":\"TestContext\",\n \"pricingDetails\": [\n        {\n            \"feeType\": \"subscription\",\n            \"listPrice\": 99.0,\n            \"termLength\": 12.0,\n            \"productName\": \"Venga Review Manager Subscription\",\n            \"currencyCode\": \"USD\",\n            \"billingRecurrence\": \"monthly\"\n        },\n        {\n            \"feeType\": \"Installation\",\n            \"listPrice\": 99.0,\n            \"termLength\": 0.0,\n            \"productName\": \"Venga Review Manager Implementation\",\n            \"currencyCode\": \"USD\",\n            \"billingRecurrence\": \"One Time\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new user agreement for agreement type venga without pricing details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b7daf28-c448-4318-9efe-dc197a811011",
								"exec": [
									"var errorData = JSON.parse(responseBody);",
									"",
									"if(responseCode.code == 400){",
									"    ",
									"   pm.test(\"Verify error code for create agreement with missing pricing details \", function () {",
									"    pm.expect(errorData.errorCode).to.eql(\"pricing details missing for pricing enabled agreement type\");",
									"});",
									"",
									"   pm.test(\"Verify error description for create agreement with missing pricing details  \", function () {",
									"    pm.expect(errorData.description).to.eql(\"Missing pricing details for agreement type\");",
									"});",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"type\":\"venga_integration_review_manager\",\n \"context\":\"urn:ot.restaurants:1011676\"\n\n}"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/agreements",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"agreements"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "458b7b73-b970-4834-b2ef-cd76234f4fa6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c8b64fc6-9394-4645-85f9-6fa936e76c6d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create and Get Terms Agreements",
			"item": [
				{
					"name": "Create terms",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain",
								"type": "text"
							},
							{
								"key": "agreementTypeId",
								"value": "3",
								"type": "text"
							},
							{
								"key": "version",
								"value": "4",
								"type": "text"
							},
							{
								"key": "locale",
								"value": "en-US",
								"type": "text"
							},
							{
								"key": "title",
								"value": "Venga Services Agreement",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<strong>Last Updated August, 2019</strong><h1>BY PLACING AN ORDER, COMPLETING THE REGISTRATION PROCESS, CLICKING TO ACCEPT THIS AGREEMENT OR ACCESSING OR USING ANY ELEMENT OF THE SERVICE, YOU AGREE TO BE BOUND BY THIS AGREEMENT. IF YOU DO NOT AGREE TO THIS AGREEMENT, YOU ARE NOT PERMITTED TO ACCESS OR USE THE SERVICE.</h1><p>This Venga Services Agreement (“Agreement) is entered by and between Venga LLC (“Venga”) and the entity placing an Order for or accessing or using the Service (“Client” or “you”). This Agreement consists of the terms and conditions set forth below and any Order. The “Effective Date” of this Agreement is the earliest of the date on which Client first places an Order, clicks to accept this Agreement or otherwise registers for, accesses or uses the Service. You acknowledge and agree that Venga may modify this Agreement from time to time as permitted in Section 20 (Modifications to Agreement).</p><p>If you are located outside of the United States, certain terms of this Agreement may vary based on your geographic location as identified in the Territorial Variations in Appendix 1. </p><p>Each party expressly agrees that this Agreement is legally binding upon it. If you are an individual accepting on behalf of Client, you represent and warrant that (a) you are of legal age to form a binding contract and have full legal authority to bind Client to this Agreement, (b) you have read and understand this Agreement and (c) you agree, on behalf of Client, to this Agreement. </p><h1>TERMS AND CONDITIONS</h1><p><strong>1.Overview. </strong>Venga offers a number of Services that allow Client to analyze, enhance and personalize guest experiences at Restaurants. This Agreement allows Client to purchase access to the Service and related services under one or more Orders. If Client makes its Order through OpenTable, then Section 10.4 (Orders through OpenTable) applies in addition to the other applicable terms set forth herein.</p><p><strong>2.Definitions.</strong>“Client Data” means any data, content or materials that Client submits to the Service or that is collected or retrieved on Client’s behalf from Third-Party Platforms.</p><p><strong>“Documentation”</strong> means Venga’s usage guidelines and documentation for the Service, the current version of which is at https://support.getvenga.com/. </p><p><strong>“Group”</strong> means the group or subgroup of Restaurants identified in the Order.</p><p><strong>“Group Members”</strong> means Client and any other legal entity that owns or controls a Restaurant in the Group, as well as a Group’s associated legal entity (e.g., the Group’s central office, such as its franchisor or parent corporation). </p><p><strong>“Laws”</strong> means (i) all applicable local, state, provincial, federal and international laws, regulations and conventions, including those related to data privacy and data transfer, international communications and export of technical or personal data (including, without limitation, the the CAN-SPAM Act of 2003, Telephone Consumer Protection Act of 1991, California Consumer Privacy Act or any related regulations), and (ii) solely related to Client’s business, those related to sale of or advertising food.</p><p><strong>“Order” or “Order Form”</strong> means each executed order or intake form or online order for the Service.</p><p><strong>“Prohibited Data”</strong> means any (a) special categories of data enumerated in Article 9(1) of Regulation (EU) 2016/679 (“GDPR”) or any successor legislation or similar laws and regulations enacted in the United States or Client’s local jurisdiction, (b) patient, medical or other protected health information regulated by the Health Insurance Portability and Accountability Act (as amended and supplemented) (“HIPAA”), (c) credit, debit or other payment card data subject to the Payment Card Industry Data Security Standards (“PCI DSS”), (d) other information subject to regulation or protection under specific Laws such as the Children’s Online Privacy Protection Act or Gramm-Leach-Bliley Act (or related rules or regulations), (e) social security numbers, driver’s license numbers or other government ID numbers or (f) any data similar to the above protected under foreign or domestic Laws.</p><p><strong>“Restaurant”</strong> means each restaurant with which Client uses the Service, as identified in the relevant Order.</p><p><strong>“Service”</strong> means Venga’s proprietary cloud service, as identified in the relevant Order and as modified from time to time. The Service includes any Software and Documentation but does not include Third-Party Platforms.</p><p><strong>“Software”</strong> means any software, scripts or other code provided by Venga for installation on Third-Party Platforms, as designated in the Documentation. </p><p>“Subscription Term”</strong> shall have the meaning as set forth in Section 10.1.</p><p><strong>“Third-Party Platform”</strong> means any non-Venga product, service or platform with which Client maintains an account and that it chooses to use with the Service (e.g., point-of-sale system, reservation platform, email service system, social media account or loyalty program account). The Third-Party Platforms supported for use with the Service are identified in the Documentation.</p><p><strong>“User”</strong> means any employee or contractor of Client that Client allows to use the Service on its behalf. </p><p><strong>3.The Service.</strong> <p><strong>3.1.Permitted Use.</strong> During the Subscription Term, Client may access and use the Service only for its internal business purposes in accordance with the Documentation and this Agreement, including any usage limits (e.g., number of Restaurants) in an Order. This includes the right to implement the Software with supported Third-Party Platforms as part of Client’s authorized use of the Service.</p><p><strong>3.2.Users.</strong> Only Users may access or use the Service. Each User must keep its login credentials confidential and not share them with anyone else. Client is responsible for its Users’ compliance with this Agreement and actions taken through their accounts (excluding misuse of accounts directly caused by Venga’s breach of this Agreement). Client will promptly notify Venga if it becomes aware of any compromise of its User login credentials.</p><p><strong>3.3.Restrictions.</strong> Client agrees not to and agrees not to permit any third party to: (a) copy (other than authorized copies of the Software), modify or make derivatives of, reverse engineer, disassemble, decompile or otherwise attempt to discover any portion of the source code, non-public APIs or trade secrets of the Service (except to the extent such prohibition on reverse engineering is prohibited by Law, and then only upon advance notice to Venga), (b) distribute, sell, sublicense, rent or lease the Service, provide third parties with use of the Service or use the Service on behalf of third parties, (c) use the Service to develop a similar or competing product or service, (d) remove, obscure or alter any notice of any copyright, trademark, patent or other proprietary right related to the Service, (e) publicly disseminate performance information or analysis regarding the Service, (f) use any deep-link, robot, spider, scraper or other automatic or manual device, process or means to access, copy, search or monitor any portion of the Service, except as expressly authorized by Venga, (g) take any action that imposes or may impose (in Venga’s sole determination) an unreasonable or a disproportionately large load on the Service, (h) utilize any device, software or routine that will interfere or attempt to interfere with the functionality of the Service, (i) use any portion of the Service to provide, or incorporate any portion of the foregoing into, any product or service provided to a third party, (j) transmit any viruses, harmful code, abusive content or false or misleading statements via the Service or (k) use the Service except as expressly permitted hereunder.</p><p><strong>4.Support.</strong> During the Subscription Term, Venga will provide web-based and email support as currently set forth at https://support.getvenga.com/ (“Support”). Venga does not guarantee that all errors or issues will be resolved.</p><p><strong>5.Setup and Additional Services.</strong> Venga may provide Client assistance with Service setup as described in an Order. Client may also purchase access to Service extensions or add-ons as set forth in an Order (e.g., additional Restaurants, historical point-of-sale system data transfer). Unless specified in the Order, any extensions or add-ons or related deliverables provided by Venga are considered part of the Service under this Agreement, including for purposes of Venga’s ownership rights and Client’s usage rights and obligations.</p><p><strong>6.Data. </strong> <p><strong>6.1.Data Use.</strong> Client grants Venga the non-exclusive, worldwide right to use, copy, store, transmit, display, modify and create derivative works of Client Data, in each case as necessary to provide, operate, improve and support the Service and any related services ordered by Client.</p><p><strong>6.2.Security.</strong> Venga will use physical, technical and organizational security measures designed to protect the Service and Client Data from unauthorized access, destruction or disclosure. </p><p><strong>6.3.Personal Data.</strong> Venga will retain, use and disclose personal data contained in the Client Data provided under this Agreement only as necessary to provide the Service, or as otherwise permitted by this Agreement or applicable data privacy Laws. To the extent that any Client Data or any other personal data (as defined in the GDPR) processed by Venga in the course of providing the Service is subject to the GDPR, the terms set out in the Data Protection Appendix set forth at https://www.getvenga.com/EUdataappendix will apply and be incorporated by reference into this Agreement and be binding and enforceable obligations of each party hereto. In the event of any conflict between the Data Protection Appendix and this Agreement with respect to personal data subject to the GDPR, the terms of the Data Protection Appendix will control. </p><p><strong>7.Client Obligations. </strong>Generally. Client represents and warrants that (a) it has full power and authority to enter into and perform obligations under this Agreement, without violating any other agreement by which it is bound, (b) Client will comply with all Laws, including data privacy Laws, (c) Client has all necessary rights, consents and permissions (and has made all necessary disclosures) to submit and use Client Data hereunder and grant Venga the rights granted in this Agreement, and neither such activities nor Venga’s exercise of such rights will violate or infringe any Laws, third-party rights (including intellectual property, publicity or privacy rights) or any terms or privacy policies governing Client Data or Third-Party Platforms, and (d) neither Client nor its officers nor its directors are, or are owned or controlled by, any individual or entity identified by any government or legal authority as restricted, including by any sanctions, anti-bribery, corruption, or anti-money laundering lists (collectively, a “List”). Client will provide information verifying its ownership or control upon request of Venga and immediately notify Venga in writing upon the occurrence of any event which results in Client’s ownership or control by an entity or individual on a List. If Client is in breach of the preceding terms, Venga may suspend its performance and/or terminate this Agreement with immediate effect.</p><p><strong>7.1.Individual Rights.</strong> Client specifically agrees that its use of the Service, including any features of the Service that permit Client to share data with Third-Party Platforms, will not violate the rights of any individual that has opted-out from sales or other disclosures of personal data, to the extent applicable under data privacy Laws.</p><p><strong>7.2.Prohibited Uses.</strong> Client must not use the Service with Prohibited Data and acknowledges that the Service is not intended to meet any legal requirements, certification or validations relevant to Prohibited Data, including PCI DSS or HIPAA. Notwithstanding anything else in this Agreement, Venga has no liability for Prohibited Data.</p><p><strong>7.3.Restaurant Group.</strong> This Section applies if Client uses the Service on behalf of its Group, as permitted in an Order. Such use allows collection, sharing and transfer of Client Data (including data of Group Members) across the Group, and Client hereby instructs and authorizes such collection, sharing and transfer of Client Data by Venga as part of the Service. Client represents and warrants that it has all necessary rights, consents and permissions (including from Group Members) to use the Service on behalf of its Group, including to enable the foregoing uses of Client Data, and will provide written evidence of the same at Venga’s request. Venga may require Client’s other Group Members to enter into a separate agreement with Venga to access the Service. Client is directly liable to Venga for any acts, omissions or breach by any Group Member as if they were Client. </p><p><strong>8.Third-Party Platforms.</strong> Client may choose to use supported Third-Party Platforms with the Service. Unless the Order provides otherwise, Client is responsible at its own expense for configuring its chosen Third-Party Platforms to work with the Service. This may include obtaining online authorization or remote access to Third-Party Platforms, making configuration changes (e.g., whitelisting Venga IP addresses) or procuring extensions or API licenses from Third-Party Platform providers. Use of Third-Party Platforms (including how Third-Party Platforms use data and fees owed by Client to the providers) is subject to Client’s agreement with the relevant provider and not this Agreement. Venga does not control and has no liability for Third-Party Platforms, including their security, functionality, availability or interoperability or how any third-party provider uses Client Data. By enabling a Third-Party Platform with the Service, Client permits Venga to access the Third-Party Platform and exchange Client Data with the Third-Party Platform on Client’s behalf.</p><p><strong>9.Public Content.</strong> Through the Service, Client may access certain publicly posted online content (e.g., guest reviews, social media) (“Public Content”). Public Content is not considered Client Data. Public Content is provided “AS IS”. Venga does not control any Public Content and disclaims all responsibility for Public Content. </p><p><strong>10.Commercial Terms.</strong> <p><strong>10.1.Subscription Term.</strong> Each Subscription Term will begin on the date of installation of the Service. Unless the Order provides otherwise, each Subscription Term will be for an initial 12-month period from the date of installation of the Service (“Initial Subscription Term”) and will renew for successive 1-month renewal Subscription Terms (each a “Renewal Term”, and together with the Initial Subscription Term, the “Subscription Term”) unless either party gives the other party notice of non-renewal at least 30 days before the current Subscription Term ends. Client understands and agrees that Venga may, after the Initial Subscription Term, and in Venga’s sole discretion, modify the fees listed on the Order. Venga will use reasonable efforts to provide 60 days written notice prior to any such modification.</p><p><strong>10.2.Fees.</strong> Fees are as specified in the Order and this Section. Fees are invoiced in advance on the schedule set forth in an Order (or in arrears for add-on purchases or non-recurring fees) and unless specified in the Order are due within 30 days of the invoice date. Late or declined payments are subject to a service charge of 1.5% per month or the maximum amount allowed by Law, whichever is less. Venga may suspend use of the Service for late payments. All fees and expenses are non-refundable except as set out in Section 20 (Modifications to Agreement All fees shall be paid in the currency as specified on the Order Form.</p><p><strong>10.3.Taxes.</strong> Client is responsible for any sales, use, GST, value-added, withholding or similar taxes or levies that apply to its Orders, whether domestic or foreign, including penalties and interest (“Taxes”), but excluding Venga’s income tax. Fees and expenses are exclusive of Taxes.</p><p><strong>10.4.Orders through OpenTable.</strong> This Section 10.4 applies to any Orders for the Service made through OpenTable, Inc. (“OpenTable”). For any such Order, OpenTable serves as Venga’s reseller. Client will pay all applicable amounts to OpenTable as set forth in the Order and this Agreement, and OpenTable will handle billing and renewal matters with Client. For clarity, OpenTable acts solely as Venga’s reseller and the Service is provided by Venga under this Agreement and OpenTable is not responsible for Venga or the Service. This Agreement does not apply to any OpenTable products or services, even if referenced in the same order or intake form as the Service.</p><p><strong>11.Disclaimers.</strong> The Service, Support and any related Venga services or deliverables are provided “AS IS”. Venga and its suppliers make no other warranties, whether express, implied, statutory or otherwise, including warranties of merchantability, fitness for a particular purpose, title or noninfringement. Venga does not warrant that Client’s use of the Service will be uninterrupted or error-free, that Venga will review Client Data for accuracy or that it will maintain Client Data without loss. Venga is not liable for delays, failures or problems inherent in use of the Internet and electronic communications or other systems outside Venga’s control. Venga makes no warranties concerning any results to be achieved from the Service or that use of the Service, including any financial or operational data provided by the Service, is appropriate for the purposes of accounting, tax or regulatory filings. Under no circumstances will Venga be liable in any way for any Third-Party Platforms or Public Content, including their errors or omissions or any losses or damages of any kind resulting from use of Third-Party Platforms or Public Content. Client may have other statutory rights, but any statutorily required warranties will be limited to the shortest legally permitted period. </p><p><strong>12.Term and Termination.</strong></p><p><strong>12.1.Term.</strong> This Agreement starts on the Effective Date and continues until expiration or termination of all Subscription Terms.</p><p><strong>12.2.Termination.</strong> Either party may terminate this Agreement (including all Orders) if the other party (a) fails to cure a material breach of this Agreement (including a failure to pay fees) within 30 days after written notice, (b) becomes insolvent or ceases operation without a successor or (c) seeks protection under a bankruptcy, receivership, trust deed, creditors’ arrangement, composition or comparable proceeding, or if such a proceeding is instituted against that party and not dismissed within 60 days. Notwithstanding anything to the contrary in this Agreement, Venga may suspend use of the Service or terminate this Agreement (including all Orders) immediately if Venga determines such action is necessary in order to comply with Laws or determines that continuing under this Agreement could result in legal or business liability or cause material harm to its products, services, reputation or users. </p><p><strong>12.3.Effect of Termination.</strong> Upon expiration or termination of this Agreement or all Orders, Client’s access to the Service will cease, other than limited use of the Service for a period of 60 days to export Client Data through Venga’s then-standard export method. Further export assistance, if requested by Client, may be subject to additional fees. At the disclosing party’s request in connection with expiration or termination of this Agreement, the receiving party will delete all of the disclosing party’s Confidential Information (including, if requested, Client Data). Client Data and other Confidential Information may be retained in the receiving party’s standard backups after deletion but will remain subject to this Agreement’s confidentiality restrictions. Upon termination or expiration, it is Client’s responsibility to uninstall any Software and disable Third-Party Platform integrations so that Client Data is no longer transmitted to the Service. </p><p><strong>12.4.Survival.</strong> These Sections survive expiration or termination of this Agreement: 2 (Definitions), 3.3 (Restrictions), 7 (Client Obligations), 10 (Commercial Terms), 11 (Disclaimers), 12.3 (Effect of Termination), 12.4 (Survival), 13 (Ownership), 14 (Usage and Aggregated Data), 15 (Limitations of Liability), 16 (Indemnification), 17 (Confidentiality), 21 (General Terms) and Appendix 1 (Territorial Variations). Except where an exclusive remedy is provided, exercising a remedy under this Agreement does not limit other remedies a party may have.</p><p><strong>13.Ownership.</strong> Neither party grants the other any rights or licenses not expressly set out in this Agreement. Except for Venga’s use rights in this Agreement, between the parties Client retains all intellectual property and other rights in Client Data provided to Venga. Except for Client’s use rights in this Agreement, Venga and its licensors retain all intellectual property and other rights in the Service, Aggregated Data and any related Venga deliverables or technology, including any modifications or improvements to these items made by Venga or its affiliates. If Client provides Venga with feedback or suggestions regarding the Service or other Venga offerings, Venga may use it without restriction. </p><p><strong>14.Usage and Aggregated Data.</strong> Venga may collect logs and other data regarding how Client uses the Service and may use it internally to operate, improve and support the Service. Venga may also aggregate such data and/or Client Data with other data in a form that is non-personally identifiable with respect to Client, its Users or Restaurant guests (“Aggregated Data”) and use it in analytics, benchmarking and reports and otherwise in accordance with applicable Law. <p><strong>15.Limitations of Liability.</strong> <p><strong>15.1.Consequential Damages Waiver.</strong> Venga (and its suppliers and affiliates) will not have any liability arising out of or related to this Agreement for any loss of use, lost data, lost profits, failure of security mechanisms, interruption of business or any indirect, special, incidental, reliance or consequential damages of any kind, even if informed of their possibility in advance. <p><strong>15.2.Liability Cap.</strong> Venga’s (and its suppliers’) entire liability arising out of or related to this Agreement will not exceed in aggregate the amounts paid by Client to Venga during the prior 12 months under this Agreement. <p><strong>15.3.Nature of Claims and Failure of Essential Purpose.</strong> The waivers and limitations in this Section 15 apply regardless of the form of action, whether in contract, tort (including negligence), strict liability or otherwise and will survive and apply even if any limited remedy in this Agreement fails of its essential purpose. <p><strong>16.Indemnification.</strong> <p><strong>16.1.Indemnification by Client.</strong> Client will defend Venga from and against any third-party claim to the extent resulting from Client Data or Client’s breach or alleged breach of Section 7 (Client Obligations), and will indemnify and hold harmless Venga against any damages or costs awarded against Venga (including reasonable attorneys’ fees) or agreed in settlement by Client resulting from the claim (subject to Section 16.2 below). <p><strong>16.2.Procedures.</strong> Client’s obligations in this Section 16 are subject to receiving (a) written notice of the claim, (b) the exclusive right to control and direct the investigation, defense and settlement of the claim and (c) reasonable cooperation of Venga, at Client’s expense for reasonable out-of-pocket costs. Client may not settle any claim without Venga’s prior written consent if settlement would require Venga to admit fault or take or refrain from taking any action. Venga may participate in a claim with its own counsel at its own expense. <p><strong>17.Confidentiality.</strong> <p><strong>17.1.Definition.</strong> “Confidential Information” means information disclosed under this Agreement that is designated by the disclosing party as proprietary or confidential or that should be reasonably understood to be proprietary or confidential due to its nature and the circumstances of its disclosure. Venga’s Confidential Information includes the terms and conditions of this Agreement (including fees/pricing) and any technical or performance information about the Service. <p><strong>17.2.Obligations.</strong> As receiving party, each party will (a) hold in confidence and not disclose Confidential Information to third parties except as permitted in this Agreement, including Section 6.1 (Data Use), and (b) only use Confidential Information to fulfill its obligations and exercise its rights in this Agreement. The receiving party may disclose Confidential Information to its employees, agents, contractors and other representatives having a legitimate need to know (including, for Venga, its affiliates and the subcontractors referenced in Section 21.8 (Subcontractors)), provided it remains responsible for their compliance with this Section 17 and they are bound to confidentiality obligations no less protective than this Section 17. <p><strong>17.3.Exclusions.</strong> These confidentiality obligations do not apply to information that the receiving party can document (a) is or becomes public knowledge through no fault of the receiving party, (b) it rightfully knew or possessed prior to receipt under this Agreement, (c) it rightfully received from a third party without breach of confidentiality obligations or (d) it independently developed without using the disclosing party’s Confidential Information. The receiving party may disclose Confidential Information if required by Law, subpoena or court order, provided (if permitted by Law) it notifies the disclosing party in advance and cooperates in any effort to obtain confidential treatment. <p><strong>17.4.Remedies.</strong> Unauthorized use or disclosure of Confidential Information may cause substantial harm for which damages alone are an insufficient remedy. Each party may seek appropriate equitable relief, in addition to other available remedies, for breach or threatened breach of this Section 17. <p><strong>18.Trials and Betas.</strong> If Client receives access to the Service or Service features on a free or trial basis or as an alpha, beta or early access offering (“Trials and Betas”), use is permitted only for Client’s internal evaluation during the period designated by Venga (or if not designated, 30 days). Trials and Betas are optional and either party may cease Trials and Betas at any time for any reason. Trials and Betas may be inoperable, incomplete or include features that Venga may never release, and their features and performance information are Venga’s Confidential Information. Notwithstanding anything else in this Agreement, Venga provides no indemnity or support for Trials and Betas and its liability for Trials and Betas will not exceed US$50. <p><strong>19.Publicity.</strong> Neither party may publicly announce this Agreement or any terms contained on an Order or contained herein except with the other party’s prior written consent or as required by Law. However, Venga may include Client and its trademarks in Venga’s client lists and promotional materials but will cease this use at Client’s written request. <p><strong>20.Modifications to Agreement.</strong> Subject to the specific terms for pricing modifications in Section 10.1, Venga may modify this Agreement from time to time and will provide reasonable notice of such modifications to Client through the Service, email or other means as determined by Venga. As specified by Venga, modifications may become effective upon renewal of Client’s then-current Subscription Term or entry into a new Order. Alternatively, Venga may specify that a modification will become effective, following a reasonable notice period, prior to Client’s next renewal or Order. In this case, if Client does not agree to the modifications, Client’s exclusive remedy will be to provide Venga with notice of termination of this Agreement (which notice must be given prior to the effective date of the modification specified by Venga) and to receive a refund from Venga of any pre-paid, unused fees for the terminated portion of the Subscription Term. Client may be required to click to accept the modified version of this Agreement in order to continue using the Service, and in any event continued use of the Service after the effective date of the modified version of this Agreement will constitute Client’s acceptance of such modified version. <p><strong>21.General Terms.</strong> <p><strong>21.1.Assignment.</strong> Client may not assign this Agreement without Venga’s prior written consent and any attempt to do so will be void. Venga may freely assign this Agreement without Client’s consent. This Agreement will bind and inure to the benefit of each party’s permitted successors and assigns. In addition, Venga’s rights and protections in this Agreement extend to its affiliates, including OpenTable. <p><strong>21.2.Governing Law, Jurisdiction and Venue.</strong> This Agreement is governed by the laws of the State of California and the United States without regard to conflicts of laws provisions and without regard to the United Nations Convention on the International Sale of Goods. The exclusive jurisdiction and venue for actions related to this Agreement will be the state and United States federal courts located in San Francisco, California and both parties submit to the personal jurisdiction of those courts. The prevailing party in any dispute under this Agreement will be entitled to its costs and reasonable attorneys’ fees. <p><strong>21.3.Notices.</strong> Except as set out in this Agreement, all notices required or permitted to be given under this Agreement must be sent to Client at any one of Client’s addresses or email addresses that have been provided to Venga and to Venga at 500 Penn Street, NE Washington, DC 20002, Attention: Legal; or legal@opentable.com, and will be deemed effectively given (a) upon delivery when personally delivered, sent by certified mail (postage prepaid and return receipt requested) or sent by a nationally recognized overnight service (with delivery confirmation); or (b) upon transmission when transmitted by electronic transmission. Either party may update its address with notice to the other party. Venga may also send operational notices to Client by email or through the Service. <p><strong>21.4.Entire Agreement.</strong> This Agreement (which includes all Orders) is the parties’ entire agreement regarding its subject matter and supersedes any prior or contemporaneous agreements regarding its subject matter. In this Agreement, headings are for convenience only and “including” and similar terms are to be construed without limitation. This Agreement may be executed in counterparts (including electronic copies and PDFs), each of which is deemed an original and which together form one and the same agreement. <p><strong>21.5.Amendments.</strong> Except as otherwise provided herein, any amendments, modifications or supplements to this Agreement must be in writing and signed by each party’s authorized representatives or, as appropriate, agreed through electronic means provided by Venga. The terms in any Client purchase order or business form will not amend or modify this Agreement and are expressly rejected by Venga; any such Client documents are for administrative purposes only and have no legal effect. Any hand-written or other changes to this Agreement or any Order without Venga’s prior written approval will not be binding against Venga. <p><strong>21.6.Waivers and Severability.</strong> Waivers must be signed by the waiving party’s authorized representative and cannot be implied from conduct. If any provision of this Agreement is held invalid, illegal or unenforceable, it will be limited to the minimum extent necessary so the rest of this Agreement remains in effect. <p><strong>21.7.Force Majeure.</strong> Neither party is liable for any delay or failure to perform any obligation under this Agreement (except for a failure to pay fees) due to events beyond its reasonable control, such as a strike, blockade, war, act of terrorism, riot, Internet or utility failures, refusal of government license or natural disaster. <p><strong>21.8.Subcontractors.</strong> Venga may use subcontractors and permit them to exercise Venga’s rights, but Venga remains responsible for their compliance with this Agreement and for its overall performance under this Agreement. <p><strong>21.9.Independent Contractors.</strong> The parties are independent contractors, not agents, partners or joint venturers. <p><strong>21.10.Export.</strong> Client agrees to comply with all relevant U.S. and foreign export and import Laws in using the Service. Client (a) represents and warrants that it is not listed on any U.S. government list of prohibited or restricted parties or located in (or a national of) a country that is subject to a U.S. government embargo or that has been designated by the U.S. government as a “terrorist supporting” country, (b) agrees not to access or use the Service in violation of any U.S. export embargo, prohibition or restriction and (c) will not submit to the Service any information controlled under the U.S. International Traffic in Arms Regulations. <p><strong>21.11.Open Source.</strong> The Software may include open source software (“OSS”), as listed in the Documentation or provided by Venga upon request. To the extent required by the OSS license, that license will apply to the OSS instead of this Agreement. <p><strong>21.12.Language.</strong> The Parties have expressly required that this Agreement and all other documents and notices relating to this Agreement be drafted in the English language.</p><h1>Appendix 1</h1> <h1>Territorial Variations</h1> <p>If you are located outside of the United States, certain terms of this Agreement may vary based on your geographic location as set forth below:</p><h1>Australia, New Zealand and the Asia-Pacific Region </h1> <p>With respect to Clients located in Australia, New Zealand and the Asia-Pacific region the Agreement is modified as follows:</p><p><strong>AU-1 – Definitions</strong></p><p>The following definitions are added or modified in their entirety (as the case may be):</p><p><strong>“Laws”</strong> means (i) all applicable local, state, provincial, federal and international laws, regulations and conventions, including those related to data privacy and data transfer, international communications and export of technical or personal data (including, without limitation, the Spam Act 2003 (Cth) or any related regulations), and (ii) solely related to Client’s business, those related to sale of or advertising food.</p><p><strong>“OpenTable”</strong> means Analytical Systems Pty Ltd trading as OpenTable Australia, ABN 82 006 137 908.</p><p><strong>AU-2 – Taxes</strong></p><p><strong>Section 10.3 (Taxes)</strong> is modified to read in its entirety as follows:</p><p><strong>10.3. Taxes.</strong> Client acknowledges and agrees that all applicable taxes associated with the Venga Service and the use thereof, and any other products and services sold, licensed or provided by Venga and/or OpenTable, as applicable, hereunder, will be the sole responsibility of Client and, where applicable, will be billed in addition to any other fees due to Venga and/or OpenTable, as applicable,. All fees set out in Order(s) are exclusive of GST and other sales and use taxes. If GST is imposed on any supply made under or in accordance with this Agreement and the consideration is exclusive of GST, the recipient of the taxable supply must pay to the supplier an additional amount equal to the GST payable on or for the taxable supply. Without limiting the foregoing, Client must pay any applicable taxes and agrees to make payment to OpenTable without deducting any amount for withholding taxes, if any are applicable (or, to gross up the amount of the payment to Venga and/or OpenTable, as applicable, so that, after the withholding taxes are deducted, the amount received by OpenTable remains the same as the amount invoiced by OpenTable). In addition, Client agrees to pay, and to indemnify and hold Venga and/or OpenTable, as applicable, harmless from, any GST, sales, use, excise, import or export, value added or similar tax or duty payable or assessed on or in connection with this Agreement, as well as the collection or withholding thereof, including penalties and interest, and all government permit or licence fees and all customs and similar fees levied upon the delivery of the Venga Service(s) and the use thereof, and any other products and services provided by Venga under the Agreement, and any costs associated with the collection of any of the foregoing items.</p><p><strong>AU-3 – Governing Law, Jurisdiction and Venue</strong></p><p><strong>Section 21.2 (Governing Law, Jurisdiction and Venue)</strong> is modified to read in its entirety as follows:</p><p><strong>“21.2 Governing Law, Jurisdiction and Venue.</strong> This Agreement and any all matters and disputes arising hereunder (including non-contractual disputes or claims) will be construed in accordance with laws of Victoria, Australia. Each party irrevocably and unconditionally submits to the non- exclusive jurisdiction of the courts exercising jurisdiction in Victoria, Australia and any courts having jurisdiction to hear appeals from any of those courts for any disputes (including non-contractual disputes or claims) under this Agreement, and the parties hereby waive any right to object to any proceedings being brought in those courts. Notwithstanding the foregoing, Venga is also entitled to apply to any court worldwide for injunctive and other remedies in order to protect or enforce its intellectual property rights. The prevailing party in any dispute under this Agreement will be entitled to its costs and reasonable attorneys’ fees.”</p><p><strong>AU-4 – Notices</strong></p><p>The address for notice for Venga shall be replaced with: Analytical Systems Pty Ltd trading as OpenTable Australia Level 22, 357 Collins Street, Melbourne, Victoria, Australia, Attention: Legal; or </p>legal@opentable.com. <h1>Canada</h1> <p>With respect to Clients located in Canada the Agreement is modified as follows:</p><p><strong>CAD -1 </strong></p><p><strong>Section 21.12 (Language)</strong> is modified to read in its entirety as follows:</p><p><strong>“21.12. Language.</strong> The Parties have expressly required that this Agreement and all other documents and notices relating to this Agreement be drafted in the English language. Les Parties ont expressément exigé que la présente convention et tous les autres documents ou avis qui y sont afférents soient rédigés dans la langue anglaise.”</p><h1>Mexico</h1> <p>With respect to Clients located in Mexico the Agreement is modified as follows:</p><p><strong>MX -1 </strong></p><p><strong>Section 21.12 (Language)</strong> is modified to read in its entirety as follows:</p><p><strong>“21.12. Language.</strong> The Parties have expressly required that this Agreement and all other documents and notices relating to this Agreement be drafted in the English language. Las Partes han requerido expresamente que este Acuerdo y todos los demás documentos y avisos relacionados con este Acuerdo se redacten en inglés.”</p><h1>United Kingdom & Europe, the Middle East and Africa (“EMEA”)</h1> <p>With respect to Clients located in the United Kingdom and EMEA the Agreement is modified as follows:</p><p><strong>UK-1 – Definitions</strong></p><p>The following definitions are added or modified in their entirety (as the case may be):</p><p><strong>“Laws”</strong> means (i) all applicable local, state, provincial, federal and international laws, regulations and conventions, including those related to data privacy and data transfer, international communications and export of technical or personal data (including, without limitation, the Regulation (EU) 2016/679, the General Data Protection Regulation or any related regulations), and (ii) solely related to Client’s business, those related to sale of or advertising food.</p><p><strong>“OpenTable”</strong> means Analytical Systems Pty Ltd trading as OpenTable International Limited.</p><p><strong>UK-2 – Taxes</strong></p><p><strong>Section 10.3 (Taxes)</strong> is modified to read in its entirety as follows:</p><p><strong>“10.3.1 Taxes.</strong> </p><p><strong>10.3.2. VAT.</strong> Venga and/or OpenTable, as applicable, will treat Client as established in the EU as a VAT taxable person if Client provides Venga and/or OpenTable, as applicable, with a valid EU VAT identification number (“VAT ID”) in the format requested by Venga and/or OpenTable, as applicable. After receipt of the VAT ID, a verification process on the validity of this VAT ID will be conducted by Venga and/or OpenTable, as applicable. During this verification process Venga and/or OpenTable, as applicable, will verify whether the VAT ID is valid. If the VAT ID provided to Venga and/or OpenTable, as applicable, appears to be valid and matches the Client Information provided to Venga and/or OpenTable, as applicable, any cross border Venga and/or OpenTable, as applicable, service charge will be made in accordance with article 44 EU VAT Directive. In such event no VAT will be charged on the service fees of Venga and/or OpenTable, as applicable, and Client will be held to self-assess the VAT due on the service fee (in accordance with article 196 EU VAT Directive). Venga and/or OpenTable, as applicable, will not apply this VAT treatment in case Client does not provide by Venga and/or OpenTable, as applicable, with a valid VAT ID (this is for example the case if the VAT ID is not provided, or not provided in the right format, by Client, or, if the VAT ID appears not to be valid according by EU’s Value Added Information Exchange System (“VIES”), or, the Client information does not, according to VIES, match with the legal name and address linked to the VAT ID provided to Venga and/or OpenTable, as applicable. In such cases Venga and/or OpenTable, as applicable, will charge VAT along the VAT rules for Business to Consumer service charges for Electronic Supplied Services. In such scenario Venga and/or OpenTable, as applicable, will charge VAT on top of the service charge due at the VAT rate applicable in the EU Member State where the Client is located. Client shall not hold Venga and/or OpenTable, as applicable, responsible in cases the VAT charged appears to be non-recoverable VAT for Client. If a valid VAT ID is provided after the VAT has been paid by Venga and/or OpenTable, as applicable, no retroactive adjustment of the service charge will have to be made by Venga and/or OpenTable, as applicable.” <p><strong>UK-3 – Governing Law, Jurisdiction and Venue</strong></p><p><strong>Section 21.2</strong> (Governing Law, Jurisdiction and Venue) is modified to read in its entirety as follows:</p><p>“21.2 Governing Law, Jurisdiction and Venue. This Agreement and any all matters and disputes arising hereunder (including non-contractual disputes or claims) will be construed in accordance with laws of England without reference to its choice of law provisions. The English courts will be the exclusive venue for any disputes (including non-contractual disputes or claims) under this Agreement, and the parties hereby irrevocably consent to the personal jurisdiction of those courts for such purposes. Notwithstanding the foregoing, Venga is also entitled to apply to any court worldwide for injunctive and other remedies in order to protect or enforce its intellectual property rights.”</p><p><strong>UK-4 – Notices</strong></p><p>The address for notice for Venga shall be replaced with: OpenTable International Ltd. Alphabeta Building 14-18, Finsbury Square, London, EC2A 1AH, England, Attention: Legal; or legal@opentable.com.</p>"
						},
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/terms",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"terms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Terms ",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uas_host}}/v1/user-agreement/terms/1",
							"host": [
								"{{uas_host}}"
							],
							"path": [
								"v1",
								"user-agreement",
								"terms",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	]
}