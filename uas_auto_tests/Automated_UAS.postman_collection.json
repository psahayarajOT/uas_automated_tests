{
	"info": {
		"_postman_id": "f5384861-a68f-421d-aa95-42dd45dd8a23",
		"name": "Automated_UAS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create user agreement",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c406cd9-4c81-45a7-9802-fcb69313c709",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if(responseCode.code !== 200){",
							"    console.log(\"Failed with the following error:\" + jsonData.errorCode);",
							"}",
							"else{",
							"",
							"pm.test(\"Verify status code indicates success\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Verify agreement id is returned\", function (){",
							"   pm.expect(jsonData.agreementId).to.not.eql(null); ",
							"});",
							"",
							"pm.environment.set(\"agreementId\", jsonData.agreementId);",
							"}",
							"",
							"if(pm.environment.get(\"orchestrator_host\") === 'http://rlc-orchestration-service-prod-sc.otenv.com'){",
							"    postman.setNextRequest(\"Discovery: user-agreement-service\");",
							"}",
							"else {",
							"    postman.setNextRequest(\"View agreement details\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"rid\":{{uas_auto_rid}},\n   \"restaurantName\":\"{{uas_auto_rest_name}}\",\n   \"locale\": \"en-US\",\n   \"legalEntity\":\"JT TestEntity, LLC.\",\n   \"opportunityId\":\"3700c000001aJV2\",\n   \"quoteId\":\"3700c000001aJV2\",\n   \"dealType\" : \"System Change\",\n   \"feeNotes\" : \"checking the notes in the agreement flow\",\n   \"client\":{\n      \"email\":\"uas.tester@mailinator.com\",\n      \"firstName\":\"Uas\",\n      \"lastName\":\"Test\"\n   },\n   \"contractOwner\":{\n      \"firstName\":\"OpenTable\",\n      \"lastName\":\"Testing UAS\",\n      \"email\":\"jtseyref@opentable.com\",\n      \"phone\":\"415-344-4200\"\n   },\n   \"pricing\":[ \n      {\n         \"productName\":\"OpenTable System (Guest Center)\",\n         \"productCode\":\"SYS010\",\n         \"currencyCode\":\"USD\",\n         \"listPrice\":10000,\n         \"totalPrice\":10.0,\n         \"discount\":100000.0,\n         \"temporaryDiscountAmount\":100000.0,\n         \"temporaryDiscountMonths\":357,\n         \"feeType\" : \"covers\",\n         \"billingRecurrence\" : \"annual\"\n      },\n       {\n         \"productName\":\"Gifts29\",\n         \"productCode\":\"ABC15\",\n         \"currencyCode\":\"USD\",\n         \"listPrice\":20.0,\n         \"discount\":25.0,\n         \"totalPrice\":-5.0,\n         \"temporaryDiscountAmount\":15.0,\n         \"temporaryDiscountMonths\":2,\n         \"feeType\" : \"covers\",\n         \"billingRecurrence\" : \"monthly\"\n      },\n       {\n         \"productName\":\"Training\",\n         \"productCode\":\"SYS013\",\n         \"currencyCode\":\"USD\",\n         \"listPrice\":800,\n         \"totalPrice\":800.0,\n         \"discount\":799.0,\n         \"temporaryDiscountAmount\":799.0,\n         \"temporaryDiscountMonths\":1,\n         \"feeType\" : \"installtion\",\n         \"billingRecurrence\" : \"once\"\n      }\n   ]\n}"
				},
				"url": {
					"raw": "{{orchestrator_host}}/orchestration/v1/agreements/",
					"host": [
						"{{orchestrator_host}}"
					],
					"path": [
						"orchestration",
						"v1",
						"agreements",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Discovery: user-agreement-service",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c6b6b448-d70a-4522-b5e7-058f49683e19",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"uas_host\", jsonData.results[0].serviceUri);",
							"",
							"pm.test(\"URI is for UAS\", function () {",
							"    pm.expect(jsonData.results[0].serviceType).to.eql('rlc-user-agreement-service');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept-Encoding",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{discovery}}/announcement?serviceType=rlc-user-agreement-service",
					"host": [
						"{{discovery}}"
					],
					"path": [
						"announcement"
					],
					"query": [
						{
							"key": "serviceType",
							"value": "rlc-user-agreement-service"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "View agreement details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa160d4e-aa28-461c-af52-8e7ea6584a79",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if(responseCode.code !== 200){",
							"    console.log(\"Failed with the following error:\" + jsonData.errorCode);",
							"}",
							"else{",
							"",
							"pm.test(\"Verify status code indicates success\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Verify agreement id is present\", function (){",
							"   pm.expect(jsonData.agreementId).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify agreement is in Created state\", function (){",
							"   pm.expect(jsonData.data.agreementState).to.eql(\"agreementCreated\"); ",
							"});",
							"",
							"pm.test(\"Verify locale is en-US\", function (){",
							"   pm.expect(jsonData.locale).to.eql(\"en-US\"); ",
							"});",
							"",
							"pm.test(\"Verify the contract has not been signed yet\", function (){",
							"   pm.expect(jsonData.isSigned).to.eql(false); ",
							"});",
							"",
							"pm.test(\"Verify agreement has an expiration date\", function (){",
							"   pm.expect(jsonData.expiryDate).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify agreement has T&C's\", function (){",
							"   pm.expect(jsonData.termsAndConditions).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify Restaurant Name is not empty\", function (){",
							"   pm.expect(jsonData.data.restaurantName).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify Legal Entity is not empty\", function (){",
							"   pm.expect(jsonData.data.legalEntity).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify Pricing section is not empty\", function (){",
							"   pm.expect(jsonData.data.pricing).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify Pricing contains 3 products\", function (){",
							"   pm.expect(jsonData.data.pricing.length).to.eql(3); ",
							"});",
							"",
							"pm.test(\"Verify currency is USD on the 1st product\", function (){",
							"   pm.expect(jsonData.data.pricing[0].currencyCode).to.eql(\"USD\"); ",
							"});",
							"",
							"pm.test(\"Verify currency is USD on the 2nd product\", function (){",
							"   pm.expect(jsonData.data.pricing[1].currencyCode).to.eql(\"USD\"); ",
							"});",
							"",
							"pm.test(\"Verify currency is USD on the 3rd product\", function (){",
							"   pm.expect(jsonData.data.pricing[2].currencyCode).to.eql(\"USD\"); ",
							"});",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"disabled": false
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{uas_host}}/user-agreement/v1/agreements/{{agreementId}}",
					"host": [
						"{{uas_host}}"
					],
					"path": [
						"user-agreement",
						"v1",
						"agreements",
						"{{agreementId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Agreement",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c406cd9-4c81-45a7-9802-fcb69313c709",
						"exec": [
							"if(responseCode.code !== 204){",
							"    var jsonData = JSON.parse(responseBody);",
							"    console.log(\"Failed with the following error:\" + jsonData.errorCode);",
							"}",
							"else{",
							"pm.test(\"Verify status code indicates success\", function () {",
							"    pm.expect(pm.response.code).to.eql(204);",
							"});",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"rid\":{{uas_auto_rid}},\n   \"restaurantName\":\"{{uas_auto_rest_name}}\",\n   \"locale\": \"en-US\",\n   \"legalEntity\":\"JT TestEntity, LLC.\",\n   \"opportunityId\":\"3700c000001aJV2\",\n   \"quoteId\":\"3700c000001aJV2\",\n   \"dealType\" : \"System Change\",\n   \"feeNotes\" : \"checking the notes in the agreement flow\",\n   \"client\":{\n      \"email\":\"uas.tester@mailinator.com\",\n      \"firstName\":\"Uas\",\n      \"lastName\":\"Test\"\n   },\n   \"contractOwner\":{\n      \"firstName\":\"OpenTable\",\n      \"lastName\":\"Testing UAS\",\n      \"email\":\"otuas.test@opentable.com\",\n      \"phone\":\"415-344-4203\"\n   },\n   \"pricing\":[ \n      {\n         \"productName\":\"OpenTable System (Guest Center)\",\n         \"productCode\":\"SYS010\",\n         \"currencyCode\":\"USD\",\n         \"listPrice\":13000,\n         \"totalPrice\":13.0,\n         \"discount\":130000.0,\n         \"temporaryDiscountAmount\":100000.0,\n         \"temporaryDiscountMonths\":24,\n         \"feeType\" : \"covers\",\n         \"billingRecurrence\" : \"annual\"\n      },\n        {\n         \"productName\":\"Training\",\n         \"productCode\":\"SYS013\",\n         \"currencyCode\":\"USD\",\n         \"listPrice\":800,\n         \"totalPrice\":800.0,\n         \"discount\":799.0,\n         \"temporaryDiscountAmount\":799.0,\n         \"temporaryDiscountMonths\":1,\n         \"feeType\" : \"installation\",\n         \"billingRecurrence\" : \"once\"\n      }\n   ]\n}"
				},
				"url": {
					"raw": "{{orchestrator_host}}/orchestration/v1/agreements/{{agreementId}}",
					"host": [
						"{{orchestrator_host}}"
					],
					"path": [
						"orchestration",
						"v1",
						"agreements",
						"{{agreementId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View updated agreement details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa160d4e-aa28-461c-af52-8e7ea6584a79",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if(responseCode.code !== 200){",
							"    console.log(\"Failed with the following error:\" + jsonData.errorCode);",
							"}",
							"else{",
							"",
							"pm.test(\"Verify status code indicates success\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Verify agreement id is present\", function (){",
							"   pm.expect(jsonData.agreementId).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify agreement is in the Updated state\", function (){",
							"   pm.expect(jsonData.data.agreementState).to.eql(\"agreementUpdated\"); ",
							"});",
							"",
							"pm.test(\"Verify locale is en-US\", function (){",
							"   pm.expect(jsonData.locale).to.eql(\"en-US\"); ",
							"});",
							"",
							"pm.test(\"Verify the contract has not been signed yet\", function (){",
							"   pm.expect(jsonData.isSigned).to.eql(false); ",
							"});",
							"",
							"pm.test(\"Verify agreement has an expiration date\", function (){",
							"   pm.expect(jsonData.expiryDate).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify agreement has T&C's\", function (){",
							"   pm.expect(jsonData.termsAndConditions).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify Restaurant Name is not empty\", function (){",
							"   pm.expect(jsonData.data.restaurantName).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify Legal Entity is not empty\", function (){",
							"   pm.expect(jsonData.data.legalEntity).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify Pricing section is not empty\", function (){",
							"   pm.expect(jsonData.data.pricing).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify Pricing has been updated and now has only 2 products\", function (){",
							"   pm.expect(jsonData.data.pricing.length).to.eql(2); ",
							"});",
							"",
							"pm.test(\"Verify currency is USD on the 1st product\", function (){",
							"   pm.expect(jsonData.data.pricing[0].currencyCode).to.eql(\"USD\"); ",
							"});",
							"",
							"pm.test(\"Verify currency is USD on the 2nd product\", function (){",
							"   pm.expect(jsonData.data.pricing[1].currencyCode).to.eql(\"USD\"); ",
							"});",
							"    ",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"disabled": false,
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{uas_host}}/user-agreement/v1/agreements/{{agreementId}}",
					"host": [
						"{{uas_host}}"
					],
					"path": [
						"user-agreement",
						"v1",
						"agreements",
						"{{agreementId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Expire previous agreement by creating the new one with the same details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c406cd9-4c81-45a7-9802-fcb69313c709",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if(responseCode.code !== 200){",
							"    console.log(\"Failed with the following error:\" + jsonData.errorCode);",
							"}",
							"else{",
							"pm.test(\"Verify status code indicates success\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Verify agreement id is returned\", function (){",
							"   pm.expect(jsonData.agreementId).to.not.eql(null); ",
							"});",
							"}",
							"",
							"pm.environment.set(\"agreementId_new\", jsonData.agreementId);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"rid\":{{uas_auto_rid}},\n   \"restaurantName\":\"{{uas_auto_rest_name}}\",\n   \"locale\": \"en-US\",\n   \"legalEntity\":\"JT TestEntity, LLC.\",\n   \"opportunityId\":\"3700c000001aJV2\",\n   \"quoteId\":\"3700c000001aJV2\",\n   \"dealType\" : \"System Change\",\n   \"feeNotes\" : \"checking the notes in the agreement flow\",\n   \"client\":{\n      \"email\":\"uas.tester@mailinator.com\",\n      \"firstName\":\"Uas\",\n      \"lastName\":\"Test\"\n   },\n   \"contractOwner\":{\n      \"firstName\":\"OpenTable\",\n      \"lastName\":\"Testing UAS\",\n      \"email\":\"otuas.test@opentable.com\",\n      \"phone\":\"415-344-4200\"\n   },\n   \"pricing\":[ \n      {\n         \"productName\":\"OpenTable System (Guest Center)\",\n         \"productCode\":\"SYS010\",\n         \"currencyCode\":\"USD\",\n         \"listPrice\":10000,\n         \"totalPrice\":10.0,\n         \"discount\":100000.0,\n         \"temporaryDiscountAmount\":100000.0,\n         \"temporaryDiscountMonths\":357,\n         \"feeType\" : \"covers\",\n         \"billingRecurrence\" : \"annual\"\n      },\n       {\n         \"productName\":\"Gifts29\",\n         \"productCode\":\"ABC15\",\n         \"currencyCode\":\"USD\",\n         \"listPrice\":20.0,\n         \"discount\":25.0,\n         \"totalPrice\":-5.0,\n         \"temporaryDiscountAmount\":15.0,\n         \"temporaryDiscountMonths\":2,\n         \"feeType\" : \"covers\",\n         \"billingRecurrence\" : \"monthly\"\n      },\n       {\n         \"productName\":\"Training\",\n         \"productCode\":\"SYS013\",\n         \"currencyCode\":\"USD\",\n         \"listPrice\":800,\n         \"totalPrice\":800.0,\n         \"discount\":799.0,\n         \"temporaryDiscountAmount\":799.0,\n         \"temporaryDiscountMonths\":1,\n         \"feeType\" : \"installtion\",\n         \"billingRecurrence\" : \"once\"\n      }\n   ]\n}"
				},
				"url": {
					"raw": "{{orchestrator_host}}/orchestration/v1/agreements/",
					"host": [
						"{{orchestrator_host}}"
					],
					"path": [
						"orchestration",
						"v1",
						"agreements",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify original agreement has expired",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa160d4e-aa28-461c-af52-8e7ea6584a79",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if(responseCode.code !== 200){",
							"    console.log(\"Failed with the following error:\" + jsonData.errorCode);",
							"}",
							"else{",
							"",
							"pm.test(\"Verify status code indicates success\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Verify agreement id is present\", function (){",
							"   pm.expect(jsonData.agreementId).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify agreement is in the Renegotiated state\", function (){",
							"   pm.expect(jsonData.data.agreementState).to.eql(\"agreementRenegotiated\"); ",
							"});",
							"",
							"pm.test(\"Verify the contract is not been signed \", function (){",
							"   pm.expect(jsonData.isSigned).to.eql(false); ",
							"});",
							"",
							"pm.test(\"Verify agreement has an expiration date\", function (){",
							"   pm.expect(jsonData.expiryDate).to.not.eql(null); ",
							"});",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"disabled": false,
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{uas_host}}/user-agreement/v1/agreements/{{agreementId}}",
					"host": [
						"{{uas_host}}"
					],
					"path": [
						"user-agreement",
						"v1",
						"agreements",
						"{{agreementId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cannot change state to termsAccepted for non-pricingConfirmed state",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa160d4e-aa28-461c-af52-8e7ea6584a79",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if(responseCode.code !== 400){",
							"    pm.test(\"Verify status code indicates an illegal attempt to change the state\", function () {",
							"        pm.expect(pm.response.code).to.eql(400);",
							"});",
							"    console.log(\"Expected 400 code, but instead received: \" + (responseCode.code));",
							"}",
							"else{",
							"",
							"pm.test(\"Verify status code indicates an illegal attempt to change the state\", function () {",
							"    pm.expect(pm.response.code).to.eql(400);",
							"});",
							"",
							"pm.test(\"Verify the error\", function (){",
							"   pm.expect(jsonData.errorCode).to.eql(\"pricing_not_yet_accepted\"); ",
							"});",
							"",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"disabled": false,
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"clientEmail\": \"uas.tester@mailinator.com\",\n    \"signedVersions\": [1],\n    \"ipAddress\": \"10.0.0.0\"\n}\n"
				},
				"url": {
					"raw": "{{uas_host}}/user-agreement/v1/agreements/{{agreementId_new}}/sign",
					"host": [
						"{{uas_host}}"
					],
					"path": [
						"user-agreement",
						"v1",
						"agreements",
						"{{agreementId_new}}",
						"sign"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change agreement state to PricingConfirmed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa160d4e-aa28-461c-af52-8e7ea6584a79",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if(responseCode.code !== 200){",
							"    console.log(\"Failed with the following error:\" + jsonData.errorCode);",
							"}",
							"else{",
							"",
							"pm.test(\"Verify status code indicates success\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Verify agreement id is present\", function (){",
							"   pm.expect(jsonData.agreementId).to.not.eql(null); ",
							"});",
							"",
							"pm.test(\"Verify agreement is in the Confirmed Pricing state\", function (){",
							"   pm.expect(jsonData.data.agreementState).to.eql(\"pricingAccepted\"); ",
							"});",
							"",
							"pm.test(\"Verify the contract is not been signed \", function (){",
							"   pm.expect(jsonData.isSigned).to.eql(false); ",
							"});",
							"",
							"pm.test(\"Verify agreement has an expiration date\", function (){",
							"   pm.expect(jsonData.expiryDate).to.not.eql(null); ",
							"});",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"disabled": false,
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"data\":{\n\t\"agreementState\": \"pricingAccepted\"\n\t}\n}"
				},
				"url": {
					"raw": "{{uas_host}}/user-agreement/v1/agreements/{{agreementId_new}}",
					"host": [
						"{{uas_host}}"
					],
					"path": [
						"user-agreement",
						"v1",
						"agreements",
						"{{agreementId_new}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign the agreement",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa160d4e-aa28-461c-af52-8e7ea6584a79",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if(responseCode.code !== 200){",
							"    console.log(\"Failed with the following error:\" + jsonData.errorCode);",
							"    console.log(\"Status code:\" + responseCode.code);",
							"}",
							"else{",
							"pm.test(\"Verify status code indicates success\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Verify the contract is signed \", function (){",
							"   pm.expect(jsonData.isSigned).to.eql(true); ",
							"});",
							"",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"disabled": false,
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"clientEmail\":\"uas.tester@mailinator.com\",\n   \"signedVersions\" : [1],\n   \"ipAddress\":\"10.0.0.0\"\n}"
				},
				"url": {
					"raw": "{{uas_host}}/user-agreement/v1/agreements/{{agreementId_new}}/sign",
					"host": [
						"{{uas_host}}"
					],
					"path": [
						"user-agreement",
						"v1",
						"agreements",
						"{{agreementId_new}}",
						"sign"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify agreement in the termsAccepted state cannot be updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa160d4e-aa28-461c-af52-8e7ea6584a79",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if(responseCode.code !== 400){",
							"    console.log(\"Failed with the following error:\" + jsonData.errorCode);",
							"    console.log(\"Status code:\" + responseCode.code);",
							"}",
							"else{",
							"pm.test(\"Verify the request has failed\", function () {",
							"    pm.expect(pm.response.code).to.eql(400);",
							"});",
							"",
							"pm.test(\"Signed agreement cannot be updated\", function (){",
							"   pm.expect(jsonData.errorCode).to.eql(\"agreement_already_signed\"); ",
							"});",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"disabled": false,
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"data\":\n{\"agreementState\": \"pricingConfirmed\"}\n}"
				},
				"url": {
					"raw": "{{uas_host}}/user-agreement/v1/agreements/{{agreementId_new}}",
					"host": [
						"{{uas_host}}"
					],
					"path": [
						"user-agreement",
						"v1",
						"agreements",
						"{{agreementId_new}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change state to appointmentScheduled",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0781556-6350-4d58-85db-c2590a2e6a54",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if(responseCode.code !== 200) {",
							"    console.log(\"Failed with the following error:\" + jsonData.errorCode);",
							"    console.log(\"Status code:\" + responseCode.code);",
							"}",
							"else{",
							"pm.test(\"Verify status code indicates success\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Appointment has been scheduled\", function (){",
							"    pm.expect(jsonData.data.agreementState).to.eql(\"appointmentScheduled\");",
							"});",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "51e1de1a-fb95-4928-baf4-545b1e03a986",
						"exec": [
							"var currentDate = new Date(new Date().getTime() + 72 * 60 * 60 * 1000);",
							"var date = currentDate.toISOString().split('T')[0];",
							"var apptDate = date + \"T11:45\" + \":00-07:00\";",
							"",
							"postman.setEnvironmentVariable(\"apptDate\", apptDate);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"disabled": false
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"appointmentDate\": \"{{apptDate}}\"\n} "
				},
				"url": {
					"raw": "{{orchestrator_host}}/orchestration/v1/agreements/{{agreementId_new}}/appointment-scheduled",
					"host": [
						"{{orchestrator_host}}"
					],
					"path": [
						"orchestration",
						"v1",
						"agreements",
						"{{agreementId_new}}",
						"appointment-scheduled"
					]
				}
			},
			"response": []
		},
		{
			"name": "View final agreement details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa160d4e-aa28-461c-af52-8e7ea6584a79",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if(responseCode.code !== 200){",
							"console.log(\"Failed with the following error:\" + jsonData.errorCode);",
							"    console.log(\"Status code:\" + responseCode.code);",
							"}",
							"else{",
							"pm.test(\"Verify status code indicates success\", function() {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Verify agreement id is present\", function() {",
							"    pm.expect(jsonData.agreementId).to.not.eql(null);",
							"});",
							"",
							"pm.test(\"Verify agreement is in the AppointmentScheduled state\", function() {",
							"    pm.expect(jsonData.data.agreementState).to.eql(\"appointmentScheduled\");",
							"});",
							"",
							"pm.test(\"Verify the contract is signed\", function (){",
							"   pm.expect(jsonData.isSigned).to.eql(true); ",
							"});",
							"",
							"pm.test(\"Verify agreement has T&C's\", function() {",
							"    pm.expect(jsonData.termsAndConditions).to.not.eql(null);",
							"});",
							"",
							"pm.test(\"Verify Restaurant Name is not empty\", function() {",
							"    pm.expect(jsonData.data.restaurantName).to.not.eql(null);",
							"});",
							"",
							"pm.test(\"Verify Legal Entity is not empty\", function() {",
							"    pm.expect(jsonData.data.legalEntity).to.not.eql(null);",
							"});",
							"",
							"pm.test(\"Verify Pricing section is not empty\", function() {",
							"    pm.expect(jsonData.data.pricing).to.not.eql(null);",
							"});",
							"",
							"pm.test(\"Verify Pricing section has 3 products\", function() {",
							"    pm.expect(jsonData.data.pricing.length).to.eql(3);",
							"});",
							"",
							"pm.test(\"Verify currency is USD on the 1st product\", function (){",
							"   pm.expect(jsonData.data.pricing[0].currencyCode).to.eql(\"USD\"); ",
							"});",
							"",
							"pm.test(\"Verify currency is USD on the 2nd product\", function (){",
							"   pm.expect(jsonData.data.pricing[1].currencyCode).to.eql(\"USD\"); ",
							"});",
							"",
							"pm.test(\"Verify currency is USD on the 3rd product\", function (){",
							"   pm.expect(jsonData.data.pricing[2].currencyCode).to.eql(\"USD\"); ",
							"});",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"disabled": false,
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{uas_host}}/user-agreement/v1/agreements/{{agreementId_new}}",
					"host": [
						"{{uas_host}}"
					],
					"path": [
						"user-agreement",
						"v1",
						"agreements",
						"{{agreementId_new}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cannot create an agreement for an un-supported locale",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c406cd9-4c81-45a7-9802-fcb69313c709",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log(\"Expected 400, but the Current status is: \" + responseCode.code);",
							"",
							"pm.test(\"Verify status code indicates the action is not allowed\", function () {",
							"    pm.expect(pm.response.code).to.eql(400);",
							"});",
							"",
							"pm.test(\"Verify errorCode states the agreement cannot be created due to missing T&C's\", function (){",
							"   pm.expect(jsonData.errorCode).to.eql(\"unavailable_locale\"); ",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"rid\":{{uas_auto_rid}},\n   \"restaurantName\":\"{{uas_auto_rest_name}}\",\n   \"locale\": \"ru-mo\",\n   \"legalEntity\":\"JT TestEntity, LLC.\",\n   \"opportunityId\":\"3700c000001aJV2\",\n   \"quoteId\":\"3700c000001aJV2\",\n   \"dealType\" : \"System Change\",\n   \"feeNotes\" : \"checking the notes in the agreement flow\",\n   \"client\":{\n      \"email\":\"uas.tester@mailinator.com\",\n      \"firstName\":\"Uas\",\n      \"lastName\":\"Test\"\n   },\n   \"contractOwner\":{\n      \"firstName\":\"OpenTable\",\n      \"lastName\":\"Testing UAS\",\n      \"email\":\"otuas.test@opentable.com\",\n      \"phone\":\"415-344-4200\"\n   },\n   \"pricing\":[ \n      {\n         \"productName\":\"OpenTable System (Guest Center)\",\n         \"productCode\":\"SYS010\",\n         \"currencyCode\":\"MDL\",\n         \"listPrice\":10000,\n         \"totalPrice\":10.0,\n         \"discount\":100000.0,\n         \"temporaryDiscountAmount\":100000.0,\n         \"temporaryDiscountMonths\":357,\n         \"feeType\" : \"covers\",\n         \"billingRecurrence\" : \"annual\"\n      },\n       {\n         \"productName\":\"Gifts29\",\n         \"productCode\":\"ABC15\",\n         \"currencyCode\":\"MDL\",\n         \"listPrice\":20.0,\n         \"discount\":25.0,\n         \"totalPrice\":-5.0,\n         \"temporaryDiscountAmount\":15.0,\n         \"temporaryDiscountMonths\":2,\n         \"feeType\" : \"covers\",\n         \"billingRecurrence\" : \"monthly\"\n      },\n       {\n         \"productName\":\"Training\",\n         \"productCode\":\"SYS013\",\n         \"currencyCode\":\"MDL\",\n         \"listPrice\":800,\n         \"totalPrice\":800.0,\n         \"discount\":799.0,\n         \"temporaryDiscountAmount\":799.0,\n         \"temporaryDiscountMonths\":1,\n         \"feeType\" : \"installtion\",\n         \"billingRecurrence\" : \"once\"\n      }\n   ]\n}"
				},
				"url": {
					"raw": "{{orchestrator_host}}/orchestration/v1/agreements/",
					"host": [
						"{{orchestrator_host}}"
					],
					"path": [
						"orchestration",
						"v1",
						"agreements",
						""
					]
				}
			},
			"response": []
		}
	]
}